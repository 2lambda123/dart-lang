library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:6:7: Error: Class 'SealedClass' can't be used as a mixin.
// class A with SealedClass {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:9:7: Error: Class 'SealedClass' can't be used as a mixin.
// class B with SealedClass, SealedMixin {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:12:7: Error: Class 'Class' can't be used as a mixin.
// class C with Class, SealedClass {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:12:7: Error: Class 'SealedClass' can't be used as a mixin.
// class C with Class, SealedClass {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:13:7: Error: Class 'Class' can't be used as a mixin.
// class D with Class, SealedMixin {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:16:7: Error: Class 'SealedClass' can't be used as a mixin.
// class E with Mixin, SealedClass {}
//       ^
//
// pkg/front_end/testcases/sealed_class/sealed_class_as_mixin.dart:20:7: Error: Class 'Class' can't be used as a mixin.
// class G with Class, Mixin {}
//       ^
//
import self as self;
import "dart:core" as core;

abstract sealed class SealedClass extends core::Object {
  synthetic constructor •() → self::SealedClass
    : super core::Object::•()
    ;
}
abstract class _A&Object&SealedClass extends core::Object implements self::SealedClass /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&SealedClass
    : super core::Object::•()
    ;
}
class A extends self::_A&Object&SealedClass {
  synthetic constructor •() → self::A
    : super self::_A&Object&SealedClass::•()
    ;
}
abstract sealed class SealedMixin extends core::Object /*isMixinDeclaration*/  {
}
abstract class _B&Object&SealedClass extends core::Object implements self::SealedClass /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_B&Object&SealedClass
    : super core::Object::•()
    ;
}
abstract class _B&Object&SealedClass&SealedMixin extends self::_B&Object&SealedClass implements self::SealedMixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_B&Object&SealedClass&SealedMixin
    : super self::_B&Object&SealedClass::•()
    ;
}
class B extends self::_B&Object&SealedClass&SealedMixin {
  synthetic constructor •() → self::B
    : super self::_B&Object&SealedClass&SealedMixin::•()
    ;
}
class Class extends core::Object {
  synthetic constructor •() → self::Class
    : super core::Object::•()
    ;
}
abstract class _C&Object&Class extends core::Object implements self::Class /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_C&Object&Class
    : super core::Object::•()
    ;
}
abstract class _C&Object&Class&SealedClass extends self::_C&Object&Class implements self::SealedClass /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_C&Object&Class&SealedClass
    : super self::_C&Object&Class::•()
    ;
}
class C extends self::_C&Object&Class&SealedClass {
  synthetic constructor •() → self::C
    : super self::_C&Object&Class&SealedClass::•()
    ;
}
abstract class _D&Object&Class extends core::Object implements self::Class /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_D&Object&Class
    : super core::Object::•()
    ;
}
abstract class _D&Object&Class&SealedMixin extends self::_D&Object&Class implements self::SealedMixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_D&Object&Class&SealedMixin
    : super self::_D&Object&Class::•()
    ;
}
class D extends self::_D&Object&Class&SealedMixin {
  synthetic constructor •() → self::D
    : super self::_D&Object&Class&SealedMixin::•()
    ;
}
abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
abstract class _E&Object&Mixin extends core::Object implements self::Mixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_E&Object&Mixin
    : super core::Object::•()
    ;
}
abstract class _E&Object&Mixin&SealedClass extends self::_E&Object&Mixin implements self::SealedClass /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_E&Object&Mixin&SealedClass
    : super self::_E&Object&Mixin::•()
    ;
}
class E extends self::_E&Object&Mixin&SealedClass {
  synthetic constructor •() → self::E
    : super self::_E&Object&Mixin&SealedClass::•()
    ;
}
abstract class _F&Object&Mixin extends core::Object implements self::Mixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_F&Object&Mixin
    : super core::Object::•()
    ;
}
abstract class _F&Object&Mixin&SealedMixin extends self::_F&Object&Mixin implements self::SealedMixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_F&Object&Mixin&SealedMixin
    : super self::_F&Object&Mixin::•()
    ;
}
class F extends self::_F&Object&Mixin&SealedMixin {
  synthetic constructor •() → self::F
    : super self::_F&Object&Mixin&SealedMixin::•()
    ;
}
abstract class _G&Object&Class extends core::Object implements self::Class /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_G&Object&Class
    : super core::Object::•()
    ;
}
abstract class _G&Object&Class&Mixin extends self::_G&Object&Class implements self::Mixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_G&Object&Class&Mixin
    : super self::_G&Object&Class::•()
    ;
}
class G extends self::_G&Object&Class&Mixin {
  synthetic constructor •() → self::G
    : super self::_G&Object&Class&Mixin::•()
    ;
}
