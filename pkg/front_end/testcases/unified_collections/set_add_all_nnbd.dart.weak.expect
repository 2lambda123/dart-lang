library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:_internal" as _in;

static method useAddAll() → void {
  dynamic dynamicSet1 = block {
    final core::Set<core::int> #t1 = col::LinkedHashSet::•<core::int>();
    #t1.{core::Set::add}{Invariant}(0){(core::int) → core::bool};
    #t1.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t1.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
  } =>#t1;
  dynamic dynamicSet2 = block {
    final core::Set<core::num> #t2 = col::LinkedHashSet::•<core::num>();
    #t2.{core::Set::add}{Invariant}(3){(core::num) → core::bool};
    #t2.{core::Set::add}{Invariant}(4){(core::num) → core::bool};
    #t2.{core::Set::add}{Invariant}(5){(core::num) → core::bool};
  } =>#t2;
  dynamic dynamicSet3 = block {
    final core::Set<core::int?> #t3 = col::LinkedHashSet::•<core::int?>();
    #t3.{core::Set::add}{Invariant}(6){(core::int?) → core::bool};
    #t3.{core::Set::add}{Invariant}(7){(core::int?) → core::bool};
    #t3.{core::Set::add}{Invariant}(8){(core::int?) → core::bool};
  } =>#t3;
  core::Iterable<core::int> iterableIntSet = block {
    final core::Set<core::int> #t4 = col::LinkedHashSet::•<core::int>();
    #t4.{core::Set::add}{Invariant}(9){(core::int) → core::bool};
    #t4.{core::Set::add}{Invariant}(10){(core::int) → core::bool};
    #t4.{core::Set::add}{Invariant}(11){(core::int) → core::bool};
  } =>#t4;
  core::Set<core::int> intSet = block {
    final core::Set<core::int> #t5 = col::LinkedHashSet::•<core::int>();
    #t5.{core::Set::add}{Invariant}(12){(core::int) → core::bool};
    #t5.{core::Set::add}{Invariant}(13){(core::int) → core::bool};
    #t5.{core::Set::add}{Invariant}(14){(core::int) → core::bool};
  } =>#t5;
  core::Set<core::int> set1 = block {
    final core::Set<core::int> #t6 = col::LinkedHashSet::•<core::int>();
    for (final has-declared-initializer dynamic #t7 in dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t8 = #t7 as{TypeError,ForNonNullableByDefault} core::int;
      #t6.{core::Set::add}{Invariant}(#t8){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t9 in dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t10 = #t9 as{TypeError,ForNonNullableByDefault} core::int;
      #t6.{core::Set::add}{Invariant}(#t10){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t11 in dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t12 = #t11 as{TypeError,ForNonNullableByDefault} core::int;
      #t6.{core::Set::add}{Invariant}(#t12){(core::int) → core::bool};
    }
    #t6.{core::Set::addAll}{Invariant}(iterableIntSet){(core::Iterable<core::int>) → void};
    #t6.{core::Set::addAll}{Invariant}(intSet){(core::Iterable<core::int>) → void};
  } =>#t6;
  self::expect(core::List::generate<core::int>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::int>}, set1);
  core::Set<core::num> set2 = block {
    final core::Set<core::num> #t13 = col::LinkedHashSet::•<core::num>();
    for (final has-declared-initializer dynamic #t14 in dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::num #t15 = #t14 as{TypeError,ForNonNullableByDefault} core::num;
      #t13.{core::Set::add}{Invariant}(#t15){(core::num) → core::bool};
    }
    for (final has-declared-initializer dynamic #t16 in dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::num #t17 = #t16 as{TypeError,ForNonNullableByDefault} core::num;
      #t13.{core::Set::add}{Invariant}(#t17){(core::num) → core::bool};
    }
    for (final has-declared-initializer dynamic #t18 in dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::num #t19 = #t18 as{TypeError,ForNonNullableByDefault} core::num;
      #t13.{core::Set::add}{Invariant}(#t19){(core::num) → core::bool};
    }
    #t13.{core::Set::addAll}{Invariant}(iterableIntSet){(core::Iterable<core::num>) → void};
    #t13.{core::Set::addAll}{Invariant}(intSet){(core::Iterable<core::num>) → void};
  } =>#t13;
  self::expect(core::List::generate<core::num>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::num>}, set2);
  core::Set<core::int> set3 = block {
    final core::Set<core::int> #t20 = col::LinkedHashSet::•<core::int>();
    for (final has-declared-initializer dynamic #t21 in dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t22 = #t21 as{TypeError,ForNonNullableByDefault} core::int;
      #t20.{core::Set::add}{Invariant}(#t22){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t23 in dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t24 = #t23 as{TypeError,ForNonNullableByDefault} core::int;
      #t20.{core::Set::add}{Invariant}(#t24){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t25 in dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final core::int #t26 = #t25 as{TypeError,ForNonNullableByDefault} core::int;
      #t20.{core::Set::add}{Invariant}(#t26){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t27 in iterableIntSet) {
      final core::int #t28 = #t27 as{TypeError,ForNonNullableByDefault} core::int;
      #t20.{core::Set::add}{Invariant}(#t28){(core::int) → core::bool};
    }
    for (final has-declared-initializer dynamic #t29 in intSet) {
      final core::int #t30 = #t29 as{TypeError,ForNonNullableByDefault} core::int;
      #t20.{core::Set::add}{Invariant}(#t30){(core::int) → core::bool};
    }
  } =>#t20;
  self::expect(core::List::generate<core::int>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::int>}, set3);
  core::Set<dynamic> set4 = block {
    final core::Set<dynamic> #t31 = col::LinkedHashSet::•<dynamic>();
    for (final has-declared-initializer dynamic #t32 in dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final dynamic #t33 = #t32 as{TypeError,ForNonNullableByDefault} dynamic;
      #t31.{core::Set::add}{Invariant}(#t33){(dynamic) → core::bool};
    }
    for (final has-declared-initializer dynamic #t34 in dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final dynamic #t35 = #t34 as{TypeError,ForNonNullableByDefault} dynamic;
      #t31.{core::Set::add}{Invariant}(#t35){(dynamic) → core::bool};
    }
    for (final has-declared-initializer dynamic #t36 in dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>) {
      final dynamic #t37 = #t36 as{TypeError,ForNonNullableByDefault} dynamic;
      #t31.{core::Set::add}{Invariant}(#t37){(dynamic) → core::bool};
    }
    for (final has-declared-initializer dynamic #t38 in iterableIntSet) {
      final dynamic #t39 = #t38 as{TypeError,ForNonNullableByDefault} dynamic;
      #t31.{core::Set::add}{Invariant}(#t39){(dynamic) → core::bool};
    }
    for (final has-declared-initializer dynamic #t40 in intSet) {
      final dynamic #t41 = #t40 as{TypeError,ForNonNullableByDefault} dynamic;
      #t31.{core::Set::add}{Invariant}(#t41){(dynamic) → core::bool};
    }
  } =>#t31;
  self::expect(core::List::generate<dynamic>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<dynamic>}, set4);
  {
    core::Set<core::int> intSet1 = block {
      final core::Set<core::int> #t42 = col::LinkedHashSet::•<core::int>();
      #t42.{core::Set::add}{Invariant}(0){(core::int) → core::bool};
      #t42.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
      #t42.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    } =>#t42;
    core::Set<core::int> intSet2 = block {
      final core::Set<core::int> #t43 = col::LinkedHashSet::•<core::int>();
      #t43.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
      #t43.{core::Set::add}{Invariant}(4){(core::int) → core::bool};
      #t43.{core::Set::add}{Invariant}(5){(core::int) → core::bool};
    } =>#t43;
    core::Set<core::int> set = block {
      final core::Set<core::int> #t44 = col::LinkedHashSet::•<core::int>();
      for (final has-declared-initializer dynamic #t45 in intSet1) {
        final core::int #t46 = #t45 as{TypeError,ForNonNullableByDefault} core::int;
        #t44.{core::Set::add}{Invariant}(#t46){(core::int) → core::bool};
      }
      for (final has-declared-initializer dynamic #t47 in intSet2) {
        final core::int #t48 = #t47 as{TypeError,ForNonNullableByDefault} core::int;
        #t44.{core::Set::add}{Invariant}(#t48){(core::int) → core::bool};
      }
    } =>#t44;
    self::expect(core::List::generate<core::int>(6, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::int>}, set);
  }
}
static method useAddAllNullable() → void {
  dynamic dynamicSet1 = block {
    final core::Set<core::int> #t49 = col::LinkedHashSet::•<core::int>();
    #t49.{core::Set::add}{Invariant}(0){(core::int) → core::bool};
    #t49.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t49.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
  } =>#t49;
  dynamic dynamicSet2 = block {
    final core::Set<core::num> #t50 = col::LinkedHashSet::•<core::num>();
    #t50.{core::Set::add}{Invariant}(3){(core::num) → core::bool};
    #t50.{core::Set::add}{Invariant}(4){(core::num) → core::bool};
    #t50.{core::Set::add}{Invariant}(5){(core::num) → core::bool};
  } =>#t50;
  dynamic dynamicSet3 = block {
    final core::Set<core::int?> #t51 = col::LinkedHashSet::•<core::int?>();
    #t51.{core::Set::add}{Invariant}(6){(core::int?) → core::bool};
    #t51.{core::Set::add}{Invariant}(7){(core::int?) → core::bool};
    #t51.{core::Set::add}{Invariant}(8){(core::int?) → core::bool};
  } =>#t51;
  core::Iterable<core::int>? iterableIntSet = true ?{core::Set<core::int>?} block {
    final core::Set<core::int> #t52 = col::LinkedHashSet::•<core::int>();
    #t52.{core::Set::add}{Invariant}(9){(core::int) → core::bool};
    #t52.{core::Set::add}{Invariant}(10){(core::int) → core::bool};
    #t52.{core::Set::add}{Invariant}(11){(core::int) → core::bool};
  } =>#t52 : null;
  core::Set<core::int>? intSet = true ?{core::Set<core::int>?} block {
    final core::Set<core::int> #t53 = col::LinkedHashSet::•<core::int>();
    #t53.{core::Set::add}{Invariant}(12){(core::int) → core::bool};
    #t53.{core::Set::add}{Invariant}(13){(core::int) → core::bool};
    #t53.{core::Set::add}{Invariant}(14){(core::int) → core::bool};
  } =>#t53 : null;
  core::Set<core::int> set1 = block {
    final core::Set<core::int> #t54 = col::LinkedHashSet::•<core::int>();
    final core::Iterable<dynamic>? #t55 = dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t55 == null))
      for (final has-declared-initializer dynamic #t56 in #t55{core::Iterable<dynamic>}) {
        final core::int #t57 = #t56 as{TypeError,ForNonNullableByDefault} core::int;
        #t54.{core::Set::add}{Invariant}(#t57){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t58 = dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t58 == null))
      for (final has-declared-initializer dynamic #t59 in #t58{core::Iterable<dynamic>}) {
        final core::int #t60 = #t59 as{TypeError,ForNonNullableByDefault} core::int;
        #t54.{core::Set::add}{Invariant}(#t60){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t61 = dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t61 == null))
      for (final has-declared-initializer dynamic #t62 in #t61{core::Iterable<dynamic>}) {
        final core::int #t63 = #t62 as{TypeError,ForNonNullableByDefault} core::int;
        #t54.{core::Set::add}{Invariant}(#t63){(core::int) → core::bool};
      }
    final core::Iterable<core::int>? #t64 = iterableIntSet;
    if(!(#t64 == null))
      #t54.{core::Set::addAll}{Invariant}(#t64{core::Iterable<core::int>}){(core::Iterable<core::int>) → void};
    final core::Iterable<core::int>? #t65 = intSet;
    if(!(#t65 == null))
      #t54.{core::Set::addAll}{Invariant}(#t65{core::Iterable<core::int>}){(core::Iterable<core::int>) → void};
  } =>#t54;
  self::expect(core::List::generate<core::int>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::int>}, set1);
  core::Set<core::num> set2 = block {
    final core::Set<core::num> #t66 = col::LinkedHashSet::•<core::num>();
    final core::Iterable<dynamic>? #t67 = dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t67 == null))
      for (final has-declared-initializer dynamic #t68 in #t67{core::Iterable<dynamic>}) {
        final core::num #t69 = #t68 as{TypeError,ForNonNullableByDefault} core::num;
        #t66.{core::Set::add}{Invariant}(#t69){(core::num) → core::bool};
      }
    final core::Iterable<dynamic>? #t70 = dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t70 == null))
      for (final has-declared-initializer dynamic #t71 in #t70{core::Iterable<dynamic>}) {
        final core::num #t72 = #t71 as{TypeError,ForNonNullableByDefault} core::num;
        #t66.{core::Set::add}{Invariant}(#t72){(core::num) → core::bool};
      }
    final core::Iterable<dynamic>? #t73 = dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t73 == null))
      for (final has-declared-initializer dynamic #t74 in #t73{core::Iterable<dynamic>}) {
        final core::num #t75 = #t74 as{TypeError,ForNonNullableByDefault} core::num;
        #t66.{core::Set::add}{Invariant}(#t75){(core::num) → core::bool};
      }
    final core::Iterable<core::num>? #t76 = iterableIntSet;
    if(!(#t76 == null))
      #t66.{core::Set::addAll}{Invariant}(#t76{core::Iterable<core::num>}){(core::Iterable<core::num>) → void};
    final core::Iterable<core::num>? #t77 = intSet;
    if(!(#t77 == null))
      #t66.{core::Set::addAll}{Invariant}(#t77{core::Iterable<core::num>}){(core::Iterable<core::num>) → void};
  } =>#t66;
  self::expect(core::List::generate<core::num>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::num>}, set2);
  core::Set<core::int> set3 = block {
    final core::Set<core::int> #t78 = col::LinkedHashSet::•<core::int>();
    final core::Iterable<dynamic>? #t79 = dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t79 == null))
      for (final has-declared-initializer dynamic #t80 in #t79{core::Iterable<dynamic>}) {
        final core::int #t81 = #t80 as{TypeError,ForNonNullableByDefault} core::int;
        #t78.{core::Set::add}{Invariant}(#t81){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t82 = dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t82 == null))
      for (final has-declared-initializer dynamic #t83 in #t82{core::Iterable<dynamic>}) {
        final core::int #t84 = #t83 as{TypeError,ForNonNullableByDefault} core::int;
        #t78.{core::Set::add}{Invariant}(#t84){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t85 = dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t85 == null))
      for (final has-declared-initializer dynamic #t86 in #t85{core::Iterable<dynamic>}) {
        final core::int #t87 = #t86 as{TypeError,ForNonNullableByDefault} core::int;
        #t78.{core::Set::add}{Invariant}(#t87){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t88 = iterableIntSet;
    if(!(#t88 == null))
      for (final has-declared-initializer dynamic #t89 in #t88{core::Iterable<dynamic>}) {
        final core::int #t90 = #t89 as{TypeError,ForNonNullableByDefault} core::int;
        #t78.{core::Set::add}{Invariant}(#t90){(core::int) → core::bool};
      }
    final core::Iterable<dynamic>? #t91 = intSet;
    if(!(#t91 == null))
      for (final has-declared-initializer dynamic #t92 in #t91{core::Iterable<dynamic>}) {
        final core::int #t93 = #t92 as{TypeError,ForNonNullableByDefault} core::int;
        #t78.{core::Set::add}{Invariant}(#t93){(core::int) → core::bool};
      }
  } =>#t78;
  self::expect(core::List::generate<core::int>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<core::int>}, set3);
  core::Set<dynamic> set4 = block {
    final core::Set<dynamic> #t94 = col::LinkedHashSet::•<dynamic>();
    final core::Iterable<dynamic>? #t95 = dynamicSet1 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t95 == null))
      for (final has-declared-initializer dynamic #t96 in #t95{core::Iterable<dynamic>}) {
        final dynamic #t97 = #t96 as{TypeError,ForNonNullableByDefault} dynamic;
        #t94.{core::Set::add}{Invariant}(#t97){(dynamic) → core::bool};
      }
    final core::Iterable<dynamic>? #t98 = dynamicSet2 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t98 == null))
      for (final has-declared-initializer dynamic #t99 in #t98{core::Iterable<dynamic>}) {
        final dynamic #t100 = #t99 as{TypeError,ForNonNullableByDefault} dynamic;
        #t94.{core::Set::add}{Invariant}(#t100){(dynamic) → core::bool};
      }
    final core::Iterable<dynamic>? #t101 = dynamicSet3 as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>?;
    if(!(#t101 == null))
      for (final has-declared-initializer dynamic #t102 in #t101{core::Iterable<dynamic>}) {
        final dynamic #t103 = #t102 as{TypeError,ForNonNullableByDefault} dynamic;
        #t94.{core::Set::add}{Invariant}(#t103){(dynamic) → core::bool};
      }
    final core::Iterable<dynamic>? #t104 = iterableIntSet;
    if(!(#t104 == null))
      for (final has-declared-initializer dynamic #t105 in #t104{core::Iterable<dynamic>}) {
        final dynamic #t106 = #t105 as{TypeError,ForNonNullableByDefault} dynamic;
        #t94.{core::Set::add}{Invariant}(#t106){(dynamic) → core::bool};
      }
    final core::Iterable<dynamic>? #t107 = intSet;
    if(!(#t107 == null))
      for (final has-declared-initializer dynamic #t108 in #t107{core::Iterable<dynamic>}) {
        final dynamic #t109 = #t108 as{TypeError,ForNonNullableByDefault} dynamic;
        #t94.{core::Set::add}{Invariant}(#t109){(dynamic) → core::bool};
      }
  } =>#t94;
  self::expect(core::List::generate<dynamic>(15, (core::int i) → core::int => i).{core::Iterable::toSet}(){() → core::Set<dynamic>}, set4);
}
static method main() → dynamic {
  self::useAddAll();
  self::useAddAllNullable();
}
static method expect(core::Set<dynamic> set1, core::Set<dynamic> set2) → void {
  if(!(set1.{_in::EfficientLengthIterable::length}{core::int} =={core::num::==}{(core::Object) → core::bool} set2.{_in::EfficientLengthIterable::length}{core::int})) {
    throw "Unexpected length. Expected ${set1.{_in::EfficientLengthIterable::length}{core::int}}, actual ${set2.{_in::EfficientLengthIterable::length}{core::int}}.";
  }
  for (dynamic element in set1) {
    if(!set2.{core::Set::contains}(element){(core::Object?) → core::bool}) {
      throw "Element ${element} not found. Expected ${set1}, actual ${set2}.";
    }
  }
  if(!(set1.{core::Object::runtimeType}{core::Type}.{core::Type::toString}(){() → core::String} =={core::String::==}{(core::Object) → core::bool} set2.{core::Object::runtimeType}{core::Type}.{core::Type::toString}(){() → core::String})) {
    throw "Runtime time difference: ${set1.{core::Object::runtimeType}{core::Type}.{core::Type::toString}(){() → core::String}} vs ${set2.{core::Object::runtimeType}{core::Type}.{core::Type::toString}(){() → core::String}}";
  }
}
