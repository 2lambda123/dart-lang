library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/inline_class/issue52119.dart:15:26: Error: Couldn't find constructor 'Foo.unresolved'.
//   Foo.erroneous() : this.unresolved();
//                          ^^^^^^^^^^
//
// pkg/front_end/testcases/inline_class/issue52119.dart:15:3: Error: Final field 'i' is not initialized by this constructor.
// Try to initialize the field using an initializing formal or a field initializer.
//   Foo.erroneous() : this.unresolved();
//   ^^^^^^^^^
// pkg/front_end/testcases/inline_class/issue52119.dart:6:13: Context: 'i' is defined here.
//   final int i;
//             ^
//
import self as self;
import "dart:core" as core;

inline class Foo /* declaredRepresentationType = core::int */ {
  constructor • = self::Foo|;
  tearoff • = self::Foo|get#;
  constructor _ = self::Foo|_;
  tearoff _ = self::Foo|get#_;
  constructor redirectNamed1 = self::Foo|redirectNamed1;
  tearoff redirectNamed1 = self::Foo|get#redirectNamed1;
  constructor redirectNamed2 = self::Foo|redirectNamed2;
  tearoff redirectNamed2 = self::Foo|get#redirectNamed2;
  constructor named = self::Foo|named;
  tearoff named = self::Foo|get#named;
  constructor erroneous = self::Foo|erroneous;
  tearoff erroneous = self::Foo|get#erroneous;
}
inline class Bar<T extends core::Object? = dynamic> /* declaredRepresentationType = T% */ {
  constructor • = self::Bar|;
  constructor _ = self::Bar|_;
}
static method Foo|(core::int i) → self::Foo {
  final self::Foo #this;
  #this = self::Foo|_(i.{core::num::+}(2){(core::num) → core::int});
  return #this;
}
static method Foo|get#(core::int i) → self::Foo
  return self::Foo|(i);
static method Foo|_(core::int i) → self::Foo {
  final self::Foo #this = i;
  return #this;
}
static method Foo|get#_(core::int i) → self::Foo
  return self::Foo|_(i);
static method Foo|redirectNamed1(core::int a, core::int b) → self::Foo {
  final self::Foo #this;
  #this = self::Foo|named(a, subtract: b);
  return #this;
}
static method Foo|get#redirectNamed1(core::int a, core::int b) → self::Foo
  return self::Foo|redirectNamed1(a, b);
static method Foo|redirectNamed2(core::int a, core::int b) → self::Foo {
  final self::Foo #this;
  final core::int #t1 = b;
  #this = self::Foo|named(a, subtract: #t1);
  return #this;
}
static method Foo|get#redirectNamed2(core::int a, core::int b) → self::Foo
  return self::Foo|redirectNamed2(a, b);
static method Foo|named(core::int value, {required core::int subtract = #C1}) → self::Foo {
  final self::Foo #this = value.{core::num::-}(subtract){(core::num) → core::int};
  return #this;
}
static method Foo|get#named(core::int value, {required core::int subtract}) → self::Foo
  return self::Foo|named(value, subtract: subtract);
static method Foo|erroneous() → self::Foo {
  final self::Foo #this;
  final dynamic #t2 = invalid-expression "pkg/front_end/testcases/inline_class/issue52119.dart:15:26: Error: Couldn't find constructor 'Foo.unresolved'.
  Foo.erroneous() : this.unresolved();
                         ^^^^^^^^^^";
  return #this;
}
static method Foo|get#erroneous() → self::Foo
  return self::Foo|erroneous();
static method Bar|<T extends core::Object? = dynamic>(self::Bar|::T% i) → self::Bar<self::Bar|::T%> {
  final self::Bar<self::Bar|::T%> #this;
  #this = self::Bar|_<self::Bar|::T%>(i);
  return #this;
}
static method Bar|_<T extends core::Object? = dynamic>(self::Bar|_::T% i) → self::Bar<self::Bar|_::T%> {
  final self::Bar<self::Bar|_::T%> #this = i;
  return #this;
}
static method main() → dynamic {
  self::expect(44, self::Foo|(42) as{ForNonNullableByDefault} core::int);
  self::expect(42, self::Foo|_(42) as{ForNonNullableByDefault} core::int);
  self::expect(3, self::Foo|redirectNamed1(5, 2) as{ForNonNullableByDefault} core::int);
  self::expect(5, self::Foo|redirectNamed2(7, 2) as{ForNonNullableByDefault} core::int);
  self::expect(5, self::Bar|<core::int>(5) as{ForNonNullableByDefault} core::int);
  self::expect("foo", self::Bar|<core::String>("foo") as{ForNonNullableByDefault} core::String);
  self::expect(5, self::Bar|_<core::int>(5) as{ForNonNullableByDefault} core::int);
  self::expect("foo", self::Bar|_<core::String>("foo") as{ForNonNullableByDefault} core::String);
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = null
}
