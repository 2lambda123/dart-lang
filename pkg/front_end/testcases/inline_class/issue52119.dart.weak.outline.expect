library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

inline class Foo /* declaredRepresentationType = core::int */ {
  constructor • = self::Foo|;
  tearoff • = self::Foo|get#;
  constructor _ = self::Foo|_;
  tearoff _ = self::Foo|get#_;
  constructor redirectNamed1 = self::Foo|redirectNamed1;
  tearoff redirectNamed1 = self::Foo|get#redirectNamed1;
  constructor redirectNamed2 = self::Foo|redirectNamed2;
  tearoff redirectNamed2 = self::Foo|get#redirectNamed2;
  constructor named = self::Foo|named;
  tearoff named = self::Foo|get#named;
  constructor erroneous = self::Foo|erroneous;
  tearoff erroneous = self::Foo|get#erroneous;
}
inline class Bar<T extends core::Object? = dynamic> /* declaredRepresentationType = T% */ {
  constructor • = self::Bar|;
  constructor _ = self::Bar|_;
}
static method Foo|(core::int i) → self::Foo
  ;
static method Foo|get#(core::int i) → self::Foo
  return self::Foo|(i);
static method Foo|_(core::int i) → self::Foo
  ;
static method Foo|get#_(core::int i) → self::Foo
  return self::Foo|_(i);
static method Foo|redirectNamed1(core::int a, core::int b) → self::Foo
  ;
static method Foo|get#redirectNamed1(core::int a, core::int b) → self::Foo
  return self::Foo|redirectNamed1(a, b);
static method Foo|redirectNamed2(core::int a, core::int b) → self::Foo
  ;
static method Foo|get#redirectNamed2(core::int a, core::int b) → self::Foo
  return self::Foo|redirectNamed2(a, b);
static method Foo|named(core::int value, {required core::int subtract = null}) → self::Foo
  ;
static method Foo|get#named(core::int value, {required core::int subtract}) → self::Foo
  return self::Foo|named(value, subtract: subtract);
static method Foo|erroneous() → self::Foo
  ;
static method Foo|get#erroneous() → self::Foo
  return self::Foo|erroneous();
static method Bar|<T extends core::Object? = dynamic>(self::Bar|::T% i) → self::Bar<self::Bar|::T%>
  ;
static method Bar|_<T extends core::Object? = dynamic>(self::Bar|_::T% i) → self::Bar<self::Bar|_::T%>
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
