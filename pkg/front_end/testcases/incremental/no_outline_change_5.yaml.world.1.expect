main = main::main;
library from "org-dartlang-test:///main.dart" as main {

  part myPart.dart;
  class Foo extends dart.core::Object /*hasConstConstructor*/  {
    const constructor •() → main::Foo*
      : super dart.core::Object::•()
      ;
    @#C1
    method toString() → dart.core::String*
      return "Foo!";
    abstract member-signature get _identityHashCode() → dart.core::int*; -> dart.core::Object::_identityHashCode
    abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → dart.core::bool*; -> dart.core::Object::_instanceOf
    abstract member-signature method _simpleInstanceOf(dynamic type) → dart.core::bool*; -> dart.core::Object::_simpleInstanceOf
    abstract member-signature method _simpleInstanceOfTrue(dynamic type) → dart.core::bool*; -> dart.core::Object::_simpleInstanceOfTrue
    abstract member-signature method _simpleInstanceOfFalse(dynamic type) → dart.core::bool*; -> dart.core::Object::_simpleInstanceOfFalse
    abstract member-signature operator ==(dynamic other) → dart.core::bool*; -> dart.core::Object::==
    abstract member-signature get hashCode() → dart.core::int*; -> dart.core::Object::hashCode
    abstract member-signature method noSuchMethod(dart.core::Invocation* invocation) → dynamic; -> dart.core::Object::noSuchMethod
    abstract member-signature get runtimeType() → dart.core::Type*; -> dart.core::Object::runtimeType
  }
  static method main() → dynamic async /* futureValueType= dynamic */ {
    await main::whatever();
    dart.core::print(#C2);
  }
  static method /* from org-dartlang-test:///myPart.dart */ whatever() → dynamic async /* futureValueType= dynamic */ {
    await null;
    return "hello";
  }
}
constants  {
  #C1 = dart.core::_Override {}
  #C2 = main::Foo {}
}


Constructor coverage from constants:
org-dartlang-test:///main.dart:
- Foo. (from org-dartlang-test:///main.dart:5:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart:25:9)

