import 'dart:async';

class Class {
  call<T>() {}
}

class GetterCall {
  void Function<T>() get call => <T>() {};
}

extension Ambiguous1 on String {
  call<T>() {}
}

extension Ambiguous2 on String {
  call<T>() {}
}

extension Extension on int {
  call<T>() {}
}

extension ExtensionGetter on double {
  void Function<T>() get call => <T>() {};
}

extension ExtensionSetter on bool {
  set call(void Function<T>() value) {}
}

main() {}
method<T extends Class, S extends int>(Class c, int i, T t, S s) {}
test<T extends Class?, S extends int>(
    Class? c1,
    GetterCall c2,
    int? i,
    T t1,
    T? t2,
    S? s,
    void Function<T>()? f1,
    Never n,
    dynamic d,
    String a,
    double b,
    bool c,
    FutureOr<Class> f2,
    Function f3) {}
