library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

static method main() → void {
  core::List<core::String> whereWasI = core::_GrowableList::•<core::String>(0);
  core::int outer = 1;
  core::int inner = 0;
  #L1:
  {
    final core::int #1#0 = outer;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #1#0) {
      {
        whereWasI.{core::List::add}("outer 0"){(core::String) → void};
        break #L1;
      }
    }
    else
      if(#C2 =={core::num::==}{(core::Object) → core::bool} #1#0) {
        {
          let final Never #t1 = (() → Never {
            #L2:
            {
              core::int #t2 = -1;
              final core::int #0#0 = inner;
              if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0)
                #t2 = 0;
              else
                if(#C2 =={core::num::==}{(core::Object) → core::bool} #0#0)
                  #t2 = 1;
              switch(#t2) {
                #L3:
                case #C1:
                  {
                    {
                      whereWasI.{core::List::add}("inner 0"){(core::String) → void};
                      continue #L4;
                    }
                  }
                #L4:
                case #C2:
                  {
                    {
                      whereWasI.{core::List::add}("inner 1"){(core::String) → void};
                    }
                  }
              }
            }
          })(){() → Never} in throw new _in::ReachabilityError::•("`null` encountered as the result from expression with type `Never`.");
        }
      }
  }
  if(!(whereWasI.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 2) || !(whereWasI.{core::List::[]}(0){(core::int) → core::String} =={core::String::==}{(core::Object) → core::bool} "inner 0") || !(whereWasI.{core::List::[]}(1){(core::int) → core::String} =={core::String::==}{(core::Object) → core::bool} "inner 1")) {
    throw "Unexpected path.";
  }
  core::print(whereWasI);
}

constants  {
  #C1 = 0
  #C2 = 1
}
