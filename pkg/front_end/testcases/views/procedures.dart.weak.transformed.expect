library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

view Class /* representationType = core::int */ {
  method instanceMethod = self::Class|instanceMethod;
  tearoff instanceMethod = self::Class|get#instanceMethod;
  static method staticMethod = self::Class|staticMethod;
}
view GenericClass<T extends core::Object? = dynamic> /* representationType = T% */ {
  method instanceMethod = self::GenericClass|instanceMethod;
  tearoff instanceMethod = self::GenericClass|get#instanceMethod;
  static method staticMethod = self::GenericClass|staticMethod;
}
static method Class|instanceMethod(lowered final self::Class #this) → void {}
static method Class|get#instanceMethod(lowered final self::Class #this) → () → void
  return () → void => self::Class|instanceMethod(#this);
static method Class|staticMethod() → void {}
static method GenericClass|instanceMethod<T extends core::Object? = dynamic>(lowered final self::GenericClass<self::GenericClass|instanceMethod::T%> #this) → void {}
static method GenericClass|get#instanceMethod<T extends core::Object? = dynamic>(lowered final self::GenericClass<self::GenericClass|get#instanceMethod::T%> #this) → () → void
  return () → void => self::GenericClass|instanceMethod<self::GenericClass|get#instanceMethod::T%>(#this);
static method GenericClass|staticMethod() → void {}
