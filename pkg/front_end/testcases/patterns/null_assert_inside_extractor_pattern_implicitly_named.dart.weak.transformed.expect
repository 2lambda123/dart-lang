library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    core::int f;
    final dynamic #0#0 = x;
    function ##0#2#initializer() → core::int?
      return #0#0{self::C}.{self::C::f}{core::int?};
    late final core::int? #0#2 = ##0#2#initializer(){() → core::int?};
    if(#0#0 is{ForNonNullableByDefault} self::C && (let final core::int? #t2 = #0#2! in let final core::int? #t3 = f = #0#2! in true))
      #t1 = 0;
    switch(#t1) {
      #L2:
      case #C1:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 0
}
