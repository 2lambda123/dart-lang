library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:37:51: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[]'.
// nonExhaustive1aMissing(List<num> list) => switch (list) {
//                                                   ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:41:51: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[]'.
// nonExhaustive1bMissing(List<num> list) => switch (list) {
//                                                   ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:45:51: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[_]'.
// nonExhaustive2aMissing(List<num> list) => switch (list) {
//                                                   ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:50:51: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[_]'.
// nonExhaustive2bMissing(List<num> list) => switch (list) {
//                                                   ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:55:51: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[_]'.
// nonExhaustive2cMissing(List<num> list) => switch (list) {
//                                                   ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:60:56: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[...[...]]'.
// nonExhaustiveRestrictedType(List<num> list) => switch (list) {
//                                                        ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:64:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[double(), ...[...]]'.
// nonExhaustive1aRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:69:58: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[]'.
// nonExhaustive1aRestrictedType(List<num> list) => switch (list) {
//                                                          ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:74:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[...[...], double()]'.
// nonExhaustive1bRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:79:58: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[...[...], double()]'.
// nonExhaustive1bRestrictedType(List<num> list) => switch (list) {
//                                                          ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:84:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[double()]'.
// nonExhaustive2aRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:90:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[double(), double(), ...[...]]'.
// nonExhaustive2bRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:96:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[double(), double(), ...[...]]'.
// nonExhaustive2cRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:102:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[double(), _, ...[...]]'.
// nonExhaustive2dRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:108:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[_, double()]'.
// nonExhaustive2eRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/list.dart:114:59: Error: The type 'List<num>' is not exhaustively matched by the switch cases.
//  - 'List' is from 'dart:core'.
// Try adding a default case or cases that match '[_, double()]'.
// nonExhaustive2fRestrictedValue(List<num> list) => switch (list) {
//                                                           ^
//
import self as self;
import "dart:core" as core;

static method exhaustive(core::List<core::num> list) → dynamic
  return block {
    core::int #t1;
    final synthesized core::List<core::num> #0#0 = list;
    #L1:
    {
      {
        if(true) {
          #t1 = 0;
          break #L1;
        }
      }
    }
  } =>#t1;
static method exhaustive1a(core::List<core::num> list) → dynamic
  return block {
    core::int #t2;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L2:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t2 = 0;
          break #L2;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && (let final dynamic #t3 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t2 = 1;
          break #L2;
        }
      }
    }
  } =>#t2;
static method exhaustive1b(core::List<core::num> list) → dynamic
  return block {
    core::int #t4;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L3:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t4 = 0;
          break #L3;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && (let final dynamic #t5 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t4 = 1;
          break #L3;
        }
      }
    }
  } =>#t4;
static method exhaustive2a(core::List<core::num> list) → dynamic
  return block {
    core::int #t6;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L4:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t6 = 0;
          break #L4;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t7 = #0#6 in true)) {
          #t6 = 1;
          break #L4;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t8 = #0#6 in true) && (let final dynamic #t9 = #0#0.{core::List::[]}(1){(core::int) → core::num} in true)) {
          #t6 = 2;
          break #L4;
        }
      }
    }
  } =>#t6;
static method exhaustive2b(core::List<core::num> list) → dynamic
  return block {
    core::int #t10;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L5:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t10 = 0;
          break #L5;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t11 = #0#6 in true)) {
          #t10 = 1;
          break #L5;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t12 = #0#6 in true) && (let final dynamic #t13 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t10 = 2;
          break #L5;
        }
      }
    }
  } =>#t10;
static method exhaustive2c(core::List<core::num> list) → dynamic
  return block {
    core::int #t14;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L6:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t14 = 0;
          break #L6;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t15 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t14 = 1;
          break #L6;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t16 = #0#0.{core::List::[]}(#0#1.{core::num::-}(2){(core::num) → core::int}){(core::int) → core::num} in true) && (let final dynamic #t17 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t14 = 2;
          break #L6;
        }
      }
    }
  } =>#t14;
static method nonExhaustive1aMissing(core::List<core::num> list) → dynamic
  return block {
    core::int #t18;
    final synthesized core::List<core::num> #0#0 = list;
    #L7:
    {
      {
        if(#0#0.{core::List::length}{core::int}.{core::num::>=}(#C2){(core::num) → core::bool} && (let final dynamic #t19 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t18 = 1;
          break #L7;
        }
      }
    }
  } =>#t18;
static method nonExhaustive1bMissing(core::List<core::num> list) → dynamic
  return block {
    core::int #t20;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L8:
    {
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && (let final dynamic #t21 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t20 = 1;
          break #L8;
        }
      }
    }
  } =>#t20;
static method nonExhaustive2aMissing(core::List<core::num> list) → dynamic
  return block {
    core::int #t22;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L9:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t22 = 0;
          break #L9;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t23 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true) && (let final dynamic #t24 = #0#0.{core::List::[]}(1){(core::int) → core::num} in true)) {
          #t22 = 2;
          break #L9;
        }
      }
    }
  } =>#t22;
static method nonExhaustive2bMissing(core::List<core::num> list) → dynamic
  return block {
    core::int #t25;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L10:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t25 = 0;
          break #L10;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t26 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true) && (let final dynamic #t27 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t25 = 2;
          break #L10;
        }
      }
    }
  } =>#t25;
static method nonExhaustive2cMissing(core::List<core::num> list) → dynamic
  return block {
    core::int #t28;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L11:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t28 = 0;
          break #L11;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t29 = #0#0.{core::List::[]}(#0#1.{core::num::-}(2){(core::num) → core::int}){(core::int) → core::num} in true) && (let final dynamic #t30 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t28 = 2;
          break #L11;
        }
      }
    }
  } =>#t28;
static method nonExhaustiveRestrictedType(core::List<core::num> list) → dynamic
  return block {
    core::int #t31;
    final synthesized core::List<core::num> #0#0 = list;
    #L12:
    {
      {
        if(#0#0.{core::List::sublist}(0){(core::int, [core::int?]) → core::List<core::num>} is{ForNonNullableByDefault} core::List<core::int>) {
          #t31 = 0;
          break #L12;
        }
      }
    }
  } =>#t31;
static method nonExhaustive1aRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t32;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L13:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t32 = 0;
          break #L13;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(0){(core::int) → core::num}) {
          #t32 = 1;
          break #L13;
        }
      }
    }
  } =>#t32;
static method nonExhaustive1aRestrictedType(core::List<core::num> list) → dynamic
  return block {
    core::int #t33;
    final synthesized core::List<core::num> #0#0 = list;
    synthesized core::int #0#2;
    synthesized core::bool #0#2#isSet = false;
    #L14:
    {
      {
        if(#0#0 is{ForNonNullableByDefault} core::List<core::int> && (#0#2#isSet ?{core::int} #0#2{core::int} : let final dynamic #t34 = #0#2#isSet = true in #0#2 = #0#0{core::List<core::int>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t33 = 0;
          break #L14;
        }
      }
      {
        if((#0#2#isSet ?{core::int} #0#2{core::int} : let final dynamic #t35 = #0#2#isSet = true in #0#2 = #0#0.{core::List::length}{core::int}).{core::num::>=}(#C2){(core::num) → core::bool} && (let final dynamic #t36 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t33 = 1;
          break #L14;
        }
      }
    }
  } =>#t33;
static method nonExhaustive1bRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t37;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L15:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t37 = 0;
          break #L15;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num}) {
          #t37 = 1;
          break #L15;
        }
      }
    }
  } =>#t37;
static method nonExhaustive1bRestrictedType(core::List<core::num> list) → dynamic
  return block {
    core::int #t38;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L16:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t38 = 0;
          break #L16;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C2){(core::num) → core::bool} && #0#0.{core::List::sublist}(0, #0#1.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<core::num>} is{ForNonNullableByDefault} core::List<core::int> && (let final dynamic #t39 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t38 = 1;
          break #L16;
        }
      }
    }
  } =>#t38;
static method nonExhaustive2aRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t40;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L17:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t40 = 0;
          break #L17;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#6) {
          #t40 = 1;
          break #L17;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t41 = #0#6 in true) && (let final dynamic #t42 = #0#0.{core::List::[]}(1){(core::int) → core::num} in true)) {
          #t40 = 2;
          break #L17;
        }
      }
    }
  } =>#t40;
static method nonExhaustive2bRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t43;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L18:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t43 = 0;
          break #L18;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t44 = #0#6 in true)) {
          #t43 = 1;
          break #L18;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#6 && (let final dynamic #t45 = #0#0.{core::List::[]}(1){(core::int) → core::num} in true)) {
          #t43 = 2;
          break #L18;
        }
      }
    }
  } =>#t43;
static method nonExhaustive2cRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t46;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L19:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t46 = 0;
          break #L19;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t47 = #0#6 in true)) {
          #t46 = 1;
          break #L19;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t48 = #0#6 in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(1){(core::int) → core::num}) {
          #t46 = 2;
          break #L19;
        }
      }
    }
  } =>#t46;
static method nonExhaustive2dRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t49;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    late final synthesized core::num #0#6 = #0#0.{core::List::[]}(0){(core::int) → core::num};
    #L20:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t49 = 0;
          break #L20;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t50 = #0#6 in true)) {
          #t49 = 1;
          break #L20;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t51 = #0#6 in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num}) {
          #t49 = 2;
          break #L20;
        }
      }
    }
  } =>#t49;
static method nonExhaustive2eRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t52;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L21:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t52 = 0;
          break #L21;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t53 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t52 = 1;
          break #L21;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(#0#1.{core::num::-}(2){(core::num) → core::int}){(core::int) → core::num} && (let final dynamic #t54 = #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num} in true)) {
          #t52 = 2;
          break #L21;
        }
      }
    }
  } =>#t52;
static method nonExhaustive2fRestrictedValue(core::List<core::num> list) → dynamic
  return block {
    core::int #t55;
    final synthesized core::List<core::num> #0#0 = list;
    late final synthesized core::int #0#1 = #0#0.{core::List::length}{core::int};
    #L22:
    {
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t55 = 0;
          break #L22;
        }
      }
      {
        if(#0#1 =={core::num::==}{(core::Object) → core::bool} #C2 && (let final dynamic #t56 = #0#0.{core::List::[]}(0){(core::int) → core::num} in true)) {
          #t55 = 1;
          break #L22;
        }
      }
      {
        if(#0#1.{core::num::>=}(#C3){(core::num) → core::bool} && (let final dynamic #t57 = #0#0.{core::List::[]}(#0#1.{core::num::-}(2){(core::num) → core::int}){(core::int) → core::num} in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → core::num}) {
          #t55 = 2;
          break #L22;
        }
      }
    }
  } =>#t55;

constants  {
  #C1 = 0
  #C2 = 1
  #C3 = 2
}
