library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method foo(dynamic x) → dynamic {
  #L1:
  {
    core::int a;
    core::int a#1;
    final dynamic #0#0 = x;
    core::bool #0#4;
    core::bool #0#4#isSet = false;
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    function ##0#11#initializer() → dynamic
      return #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic};
    late final dynamic #0#11 = ##0#11#initializer(){() → dynamic};
    dynamic #t1;
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && (#0#4#isSet ?{core::bool} #0#4{core::bool} : let final core::bool* #t2 = #0#4#isSet = true in #0#4 = #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C2) && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t3 = a = #0#6{core::int} in true)) && (let final core::int #t4 = #t1 = a in true) || #0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#4#isSet ?{core::bool} #0#4{core::bool} : let final core::bool* #t5 = #0#4#isSet = true in #0#4 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C2) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && (#0#11 is{ForNonNullableByDefault} core::int && (let final core::int #t6 = a#1 = #0#11{core::int} in true)) && (let final core::int #t7 = #t1 = a#1 in true)) {
      core::int a = #t1{core::int};
      {
        return a;
      }
    }
    else {
      {
        return 0;
      }
    }
  }
}

constants  {
  #C1 = "a"
  #C2 = 1
}
