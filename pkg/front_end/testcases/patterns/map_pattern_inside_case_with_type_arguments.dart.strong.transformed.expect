library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    final dynamic #0#0 = x;
    if(#0#0 is{ForNonNullableByDefault} core::Map<core::String, core::int> && #0#0{core::Map<core::String, core::int>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #0#0{core::Map<core::String, core::int>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && #C3 =={core::num::==}{(core::Object) → core::bool} (let core::int? #t2 = #0#0{core::Map<core::String, core::int>}.{core::Map::[]}(#C2){(core::Object?) → core::int?} in #t2 == null ?{core::int} #t2 as{ForNonNullableByDefault} core::int : #t2{core::int}) && #0#0{core::Map<core::String, core::int>}.{core::Map::containsKey}(#C4){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} (let core::int? #t3 = #0#0{core::Map<core::String, core::int>}.{core::Map::[]}(#C4){(core::Object?) → core::int?} in #t3 == null ?{core::int} #t3 as{ForNonNullableByDefault} core::int : #t3{core::int}))
      #t1 = 0;
    switch(#t1) {
      #L2:
      case #C5:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 2
  #C2 = "a"
  #C3 = 1
  #C4 = "b"
  #C5 = 0
}
