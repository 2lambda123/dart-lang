library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/issue50933.dart:13:56: Error: A pattern field in an object pattern must be named.
// Try adding a pattern name or ':' before the pattern.
//   if (x case A(:var foo!, :var bar, :var baz?, var boz as double)) {
//                                                        ^
//
// pkg/front_end/testcases/patterns/issue50933.dart:17:23: Error: The getter name is not specified explicitly, and the pattern is not a variable. Try specifying the getter name explicitly, or using a variable pattern.
//   } else if (x case A(: [1, 2])) { // Error
//                       ^
//
// pkg/front_end/testcases/patterns/issue50933.dart:19:22: Error: The getter name is not specified explicitly, and the pattern is not a variable. Try specifying the getter name explicitly, or using a variable pattern.
//   } else if (x case (: [1, 2])) { // Error
//                      ^
//
// pkg/front_end/testcases/patterns/issue50933.dart:13:24: Warning: The null-assert pattern will have no effect because the matched type isn't nullable.
// Try replacing the null-assert pattern with its nested pattern.
//   if (x case A(:var foo!, :var bar, :var baz?, var boz as double)) {
//                        ^
//
// pkg/front_end/testcases/patterns/issue50933.dart:13:45: Warning: The null-check pattern will have no effect because the matched type isn't nullable.
// Try replacing the null-check pattern with its nested pattern.
//   if (x case A(:var foo!, :var bar, :var baz?, var boz as double)) {
//                                             ^
//
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  abstract get foo() → core::int;
  abstract get bar() → core::int;
  abstract get baz() → core::int;
  abstract get boz() → core::num;
}
static method test(dynamic x) → dynamic {
  {
    core::int foo;
    core::int bar;
    core::int baz;
    final dynamic #3#0 = x;
    function ##3#2#initializer() → core::int
      return #3#0{self::A}.{self::A::foo}{core::int};
    late final core::int #3#2 = ##3#2#initializer(){() → core::int};
    function ##3#5#initializer() → core::int
      return #3#0{self::A}.{self::A::baz}{core::int};
    late final core::int #3#5 = ##3#5#initializer(){() → core::int};
    if(#3#0 is{ForNonNullableByDefault} self::A && (let final core::int #t1 = #3#2! in let final core::int #t2 = foo = #3#2! in true) && (let final core::int #t3 = bar = #3#0{self::A}.{self::A::bar}{core::int} in true) && (!(#3#5 == null) ?{core::bool} let final core::int #t4 = baz = #3#5 in true : false)) {
      return 0;
    }
    else {
      dynamic foo;
      dynamic bar;
      dynamic baz;
      core::double boz;
      final dynamic #2#0 = x;
      function ##2#2#initializer() → core::Object?
        return #2#0{(core::Object?, {bar: core::Object?, baz: core::Object?, foo: core::Object?})}.foo{core::Object?};
      late final core::Object? #2#2 = ##2#2#initializer(){() → core::Object?};
      function ##2#5#initializer() → core::Object?
        return #2#0{(core::Object?, {bar: core::Object?, baz: core::Object?, foo: core::Object?})}.baz{core::Object?};
      late final core::Object? #2#5 = ##2#5#initializer(){() → core::Object?};
      function ##2#7#initializer() → core::Object?
        return #2#0{(core::Object?, {bar: core::Object?, baz: core::Object?, foo: core::Object?})}.$1{core::Object?};
      late final core::Object? #2#7 = ##2#7#initializer(){() → core::Object?};
      if(#2#0 is{ForNonNullableByDefault} (core::Object?, {bar: core::Object?, baz: core::Object?, foo: core::Object?}) && (let final core::Object? #t5 = #2#2! in let final core::Object? #t6 = foo = #2#2! in true) && (let final core::Object? #t7 = bar = #2#0{(core::Object?, {bar: core::Object?, baz: core::Object?, foo: core::Object?})}.bar{core::Object?} in true) && (!(#2#5 == null) ?{core::bool} let final core::Object? #t8 = baz = #2#5 in true : false) && (let final core::double #t9 = #2#7 as{ForNonNullableByDefault} core::double in let final core::double #t10 = boz = #2#7 as{ForNonNullableByDefault} core::double in true)) {
        return 1;
      }
      else {
        final dynamic #1#0 = x;
        if(#1#0 is{ForNonNullableByDefault} self::A) {
          return 2;
        }
        else {
          final dynamic #0#0 = x;
          if(#0#0 is{ForNonNullableByDefault} (core::Object?) && invalid-expression "pkg/front_end/testcases/patterns/issue50933.dart:19:22: Error: The getter name is not specified explicitly, and the pattern is not a variable. Try specifying the getter name explicitly, or using a variable pattern.
  } else if (x case (: [1, 2])) { // Error
                     ^") {
            return 3;
          }
        }
      }
    }
  }
}
