library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    core::int y;
    final dynamic #0#0 = x;
    dynamic #t2;
    if(#0#0 is{ForNonNullableByDefault} core::int && (let final core::int #t3 = y = #0#0{core::int} in true)) {
      #t1 = 0;
      #t2 = y;
    }
    else
      if(#C1 =={core::String::==}{(core::Object) → core::bool} #0#0) {
        #t1 = 1;
      }
      else {
        #t1 = 2;
      }
    switch(#t1) {
      #L2:
      case #C2:
        {
          core::int y = #t2{core::int};
          {
            continue #L3;
          }
        }
      #L3:
      case #C3:
        {
          {
            return 0;
          }
        }
      #L4:
      case #C4:
      default:
        {
          {
            return 1;
          }
        }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(self::test(0), 0);
  self::expectEquals(self::test(1), 0);
  self::expectEquals(self::test(2), 0);
  self::expectEquals(self::test("foo"), 0);
  self::expectEquals(self::test("bar"), 1);
  self::expectEquals(self::test(null), 1);
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = "foo"
  #C2 = 0
  #C3 = 1
  #C4 = 2
}
