library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field core::int field;
  final field core::int finalField;
  constructor •(core::int field, core::int finalField) → self::Class
    : self::Class::field = field, self::Class::finalField = finalField, super core::Object::•()
    ;
  get getter() → core::int
    return this.{self::Class::finalField}{core::int};
}
static method ifCase(dynamic o) → core::int {
  core::print("o = ${o}");
  {
    final dynamic #0#0 = o;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0) {
      return 1;
    }
  }
  {
    final dynamic #1#0 = o;
    function ##1#2#initializer() → core::Object?
      return #1#0{({f: core::Object?})}.f{core::Object?};
    late final core::Object? #1#2 = ##1#2#initializer(){() → core::Object?};
    if(#1#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final core::int #t1 = #1#2 as{ForNonNullableByDefault} core::int in (#1#2 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final core::int #t2 = #1#2 as{ForNonNullableByDefault} core::int in (#1#2 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
      return 2;
    }
  }
  {
    final dynamic #2#0 = o;
    if(#C4 =={core::num::==}{(core::Object) → core::bool} #2#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #2#0) {
      return 3;
    }
  }
  {
    final dynamic #3#0 = o;
    function ##3#2#initializer() → core::Object?
      return #3#0{({g: core::Object?})}.g{core::Object?};
    late final core::Object? #3#2 = ##3#2#initializer(){() → core::Object?};
    if(#3#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final core::int #t3 = #3#2 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #3#2 as{ForNonNullableByDefault} core::int)) {
      return 4;
    }
  }
  {
    final dynamic #4#0 = o;
    if(#4#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final core::Object? #t4 = #4#0{({a: core::Object?})}.a{core::Object?}! in true)) {
      return 5;
    }
  }
  {
    final dynamic #5#0 = o;
    if(#5#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#5#0{({b: core::Object?})}.b{core::Object?} == null) ?{core::bool} true : false)) {
      return 6;
    }
  }
  {
    final dynamic #6#0 = o;
    if(#6#0 is{ForNonNullableByDefault} core::List<dynamic> && #6#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #6#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C7 =={core::num::==}{(core::Object) → core::bool} #6#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
      return 7;
    }
  }
  {
    final dynamic #7#0 = o;
    if(#7#0 is{ForNonNullableByDefault} core::List<dynamic> && #7#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C7 =={core::num::==}{(core::Object) → core::bool} #7#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C2 =={core::num::==}{(core::Object) → core::bool} #7#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
      return 8;
    }
  }
  {
    final dynamic #8#0 = o;
    function ##8#2#initializer() → core::int
      return #8#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final core::int #8#2 = ##8#2#initializer(){() → core::int};
    if(#8#0 is{ForNonNullableByDefault} core::List<dynamic> && #8#2.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C8 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(#8#2.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
      return 9;
    }
  }
  {
    final dynamic #9#0 = o;
    function ##9#12#initializer() → core::List<dynamic>
      return #9#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #9#12 = ##9#12#initializer(){() → core::List<dynamic>};
    function ##9#15#initializer() → dynamic
      return #9#12.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #9#15 = ##9#15#initializer(){() → dynamic};
    function ##9#19#initializer() → dynamic
      return #9#12.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #9#19 = ##9#19#initializer(){() → dynamic};
    if(#9#0 is{ForNonNullableByDefault} core::List<dynamic> && #9#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C8 =={core::num::==}{(core::Object) → core::bool} #9#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #9#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#9#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t5 = #9#15 as{ForNonNullableByDefault} core::int in (#9#15 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t6 = #9#19 as{ForNonNullableByDefault} core::int in (#9#19 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
      return 10;
    }
  }
  {
    final dynamic #10#0 = o;
    function ##10#2#initializer() → core::int
      return #10#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final core::int #10#2 = ##10#2#initializer(){() → core::int};
    function ##10#12#initializer() → core::List<dynamic>
      return #10#0{core::List<dynamic>}.{core::List::sublist}(2, #10#2.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #10#12 = ##10#12#initializer(){() → core::List<dynamic>};
    function ##10#16#initializer() → dynamic
      return #10#12.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #10#16 = ##10#16#initializer(){() → dynamic};
    function ##10#20#initializer() → dynamic
      return #10#12.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #10#20 = ##10#20#initializer(){() → dynamic};
    if(#10#0 is{ForNonNullableByDefault} core::List<dynamic> && #10#2.{core::num::>=}(#C2){(core::num) → core::bool} && #C3 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C4 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#10#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t7 = #10#16 as{ForNonNullableByDefault} core::int in (#10#16 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t8 = #10#20 as{ForNonNullableByDefault} core::int in (#10#20 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(#10#2.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
      return 11;
    }
  }
  {
    final dynamic #11#0 = o;
    if(#11#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #11#0{self::Class}.{self::Class::field}{core::int}) {
      return 12;
    }
  }
  {
    final dynamic #12#0 = o;
    if(#12#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #12#0{self::Class}.{self::Class::finalField}{core::int}) {
      return 13;
    }
  }
  {
    final dynamic #13#0 = o;
    if(#13#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::field}{core::int} && #C8 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::getter}{core::int}) {
      return 14;
    }
  }
  {
    final dynamic #14#0 = o;
    if(#14#0 is{ForNonNullableByDefault} self::Class) {
      return 15;
    }
  }
  {
    final dynamic #15#0 = o;
    if(#15#0 =={core::Object::==}{(core::Object) → core::bool} #C9) {
      return 16;
    }
  }
  {
    final dynamic #16#0 = o;
    if(#16#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#16#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
      return 17;
    }
  }
  {
    final dynamic #17#0 = o;
    if(#17#0 is{ForNonNullableByDefault} core::Map<core::int, core::int> && #17#0{core::Map<core::int, core::int>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #17#0{core::Map<core::int, core::int>}.{core::Map::containsKey}(#C3){(core::Object?) → core::bool} && #17#0{core::Map<core::int, core::int>}.{core::Map::[]}(#C3){(core::Object?) → core::int?}.{core::num::>=}(#C11){(core::num) → core::bool}) {
      return 18;
    }
  }
  {
    final dynamic #18#0 = o;
    if(#18#0 is{ForNonNullableByDefault} core::List<dynamic> && #18#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final dynamic #t9 = #18#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} in true)) {
      return 19;
    }
  }
  {
    final dynamic #19#0 = o;
    if(#19#0 is{ForNonNullableByDefault} core::bool) {
      return 20;
    }
  }
  {
    final dynamic #20#0 = o;
    if(#20#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #20#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C12) {
      return 21;
    }
  }
  {
    final dynamic #21#0 = o;
    if(#21#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #21#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #21#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C12){(core::Object?) → core::bool} && #21#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C12){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
      return 22;
    }
  }
  {
    final dynamic #22#0 = o;
    if(#22#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #22#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && #22#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #22#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
      return 23;
    }
  }
  {
    dynamic a;
    final dynamic #23#0 = o;
    if(#23#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #23#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #23#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t10 = a = #23#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} in true)) {
      return 24;
    }
  }
  {
    core::int b;
    final dynamic #24#0 = o;
    function ##24#8#initializer() → dynamic
      return #24#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    late final dynamic #24#8 = ##24#8#initializer(){() → dynamic};
    if(#24#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #24#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #24#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#24#8 is{ForNonNullableByDefault} core::int && (let final core::int #t11 = b = #24#8{core::int} in true))) {
      return 25;
    }
  }
  {
    final dynamic #25#0 = o;
    if(#25#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C12 =={core::num::==}{(core::Object) → core::bool} #25#0{(core::Object?, core::Object?)}.$1{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #25#0{(core::Object?, core::Object?)}.$2{core::Object?}) {
      return 26;
    }
  }
  {
    dynamic c;
    final dynamic #26#0 = o;
    if(#26#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #26#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && (let final core::Object? #t12 = c = #26#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true)) {
      return 27;
    }
  }
  {
    dynamic d;
    final dynamic #27#0 = o;
    if(#27#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #27#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final core::Object? #t13 = d = #27#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
      return 28;
    }
  }
  return 0;
}
static method ifCaseElse(dynamic o) → core::int {
  core::print("o = ${o}");
  {
    final dynamic #27#0 = o;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #27#0) {
      return 1;
    }
    else {
      final dynamic #26#0 = o;
      function ##26#2#initializer() → core::Object?
        return #26#0{({f: core::Object?})}.f{core::Object?};
      late final core::Object? #26#2 = ##26#2#initializer(){() → core::Object?};
      if(#26#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final core::int #t14 = #26#2 as{ForNonNullableByDefault} core::int in (#26#2 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final core::int #t15 = #26#2 as{ForNonNullableByDefault} core::int in (#26#2 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
        return 2;
      }
      else {
        final dynamic #25#0 = o;
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #25#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #25#0) {
          return 3;
        }
        else {
          final dynamic #24#0 = o;
          function ##24#2#initializer() → core::Object?
            return #24#0{({g: core::Object?})}.g{core::Object?};
          late final core::Object? #24#2 = ##24#2#initializer(){() → core::Object?};
          if(#24#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final core::int #t16 = #24#2 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #24#2 as{ForNonNullableByDefault} core::int)) {
            return 4;
          }
          else {
            final dynamic #23#0 = o;
            if(#23#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final core::Object? #t17 = #23#0{({a: core::Object?})}.a{core::Object?}! in true)) {
              return 5;
            }
            else {
              final dynamic #22#0 = o;
              if(#22#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#22#0{({b: core::Object?})}.b{core::Object?} == null) ?{core::bool} true : false)) {
                return 6;
              }
              else {
                final dynamic #21#0 = o;
                if(#21#0 is{ForNonNullableByDefault} core::List<dynamic> && #21#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #21#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C7 =={core::num::==}{(core::Object) → core::bool} #21#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
                  return 7;
                }
                else {
                  final dynamic #20#0 = o;
                  if(#20#0 is{ForNonNullableByDefault} core::List<dynamic> && #20#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C7 =={core::num::==}{(core::Object) → core::bool} #20#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C2 =={core::num::==}{(core::Object) → core::bool} #20#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
                    return 8;
                  }
                  else {
                    final dynamic #19#0 = o;
                    function ##19#2#initializer() → core::int
                      return #19#0{core::List<dynamic>}.{core::List::length}{core::int};
                    late final core::int #19#2 = ##19#2#initializer(){() → core::int};
                    if(#19#0 is{ForNonNullableByDefault} core::List<dynamic> && #19#2.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #19#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C8 =={core::num::==}{(core::Object) → core::bool} #19#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #19#0{core::List<dynamic>}.{core::List::[]}(#19#2.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
                      return 9;
                    }
                    else {
                      final dynamic #18#0 = o;
                      function ##18#12#initializer() → core::List<dynamic>
                        return #18#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
                      late final core::List<dynamic> #18#12 = ##18#12#initializer(){() → core::List<dynamic>};
                      function ##18#15#initializer() → dynamic
                        return #18#12.{core::List::[]}(0){(core::int) → dynamic};
                      late final dynamic #18#15 = ##18#15#initializer(){() → dynamic};
                      function ##18#19#initializer() → dynamic
                        return #18#12.{core::List::[]}(1){(core::int) → dynamic};
                      late final dynamic #18#19 = ##18#19#initializer(){() → dynamic};
                      if(#18#0 is{ForNonNullableByDefault} core::List<dynamic> && #18#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C8 =={core::num::==}{(core::Object) → core::bool} #18#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #18#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#18#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t18 = #18#15 as{ForNonNullableByDefault} core::int in (#18#15 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t19 = #18#19 as{ForNonNullableByDefault} core::int in (#18#19 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
                        return 10;
                      }
                      else {
                        final dynamic #17#0 = o;
                        function ##17#2#initializer() → core::int
                          return #17#0{core::List<dynamic>}.{core::List::length}{core::int};
                        late final core::int #17#2 = ##17#2#initializer(){() → core::int};
                        function ##17#12#initializer() → core::List<dynamic>
                          return #17#0{core::List<dynamic>}.{core::List::sublist}(2, #17#2.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
                        late final core::List<dynamic> #17#12 = ##17#12#initializer(){() → core::List<dynamic>};
                        function ##17#16#initializer() → dynamic
                          return #17#12.{core::List::[]}(0){(core::int) → dynamic};
                        late final dynamic #17#16 = ##17#16#initializer(){() → dynamic};
                        function ##17#20#initializer() → dynamic
                          return #17#12.{core::List::[]}(1){(core::int) → dynamic};
                        late final dynamic #17#20 = ##17#20#initializer(){() → dynamic};
                        if(#17#0 is{ForNonNullableByDefault} core::List<dynamic> && #17#2.{core::num::>=}(#C2){(core::num) → core::bool} && #C3 =={core::num::==}{(core::Object) → core::bool} #17#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C4 =={core::num::==}{(core::Object) → core::bool} #17#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#17#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t20 = #17#16 as{ForNonNullableByDefault} core::int in (#17#16 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t21 = #17#20 as{ForNonNullableByDefault} core::int in (#17#20 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #17#0{core::List<dynamic>}.{core::List::[]}(#17#2.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
                          return 11;
                        }
                        else {
                          final dynamic #16#0 = o;
                          if(#16#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #16#0{self::Class}.{self::Class::field}{core::int}) {
                            return 12;
                          }
                          else {
                            final dynamic #15#0 = o;
                            if(#15#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #15#0{self::Class}.{self::Class::finalField}{core::int}) {
                              return 13;
                            }
                            else {
                              final dynamic #14#0 = o;
                              if(#14#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #14#0{self::Class}.{self::Class::field}{core::int} && #C8 =={core::num::==}{(core::Object) → core::bool} #14#0{self::Class}.{self::Class::getter}{core::int}) {
                                return 14;
                              }
                              else {
                                final dynamic #13#0 = o;
                                if(#13#0 is{ForNonNullableByDefault} self::Class) {
                                  return 15;
                                }
                                else {
                                  final dynamic #12#0 = o;
                                  if(#12#0 =={core::Object::==}{(core::Object) → core::bool} #C9) {
                                    return 16;
                                  }
                                  else {
                                    final dynamic #11#0 = o;
                                    if(#11#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#11#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
                                      return 17;
                                    }
                                    else {
                                      final dynamic #10#0 = o;
                                      if(#10#0 is{ForNonNullableByDefault} core::Map<core::int, core::int> && #10#0{core::Map<core::int, core::int>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #10#0{core::Map<core::int, core::int>}.{core::Map::containsKey}(#C3){(core::Object?) → core::bool} && #10#0{core::Map<core::int, core::int>}.{core::Map::[]}(#C3){(core::Object?) → core::int?}.{core::num::>=}(#C11){(core::num) → core::bool}) {
                                        return 18;
                                      }
                                      else {
                                        final dynamic #9#0 = o;
                                        if(#9#0 is{ForNonNullableByDefault} core::List<dynamic> && #9#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final dynamic #t22 = #9#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} in true)) {
                                          return 19;
                                        }
                                        else {
                                          final dynamic #8#0 = o;
                                          if(#8#0 is{ForNonNullableByDefault} core::bool) {
                                            return 20;
                                          }
                                          else {
                                            final dynamic #7#0 = o;
                                            if(#7#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #7#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C12) {
                                              return 21;
                                            }
                                            else {
                                              final dynamic #6#0 = o;
                                              if(#6#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #6#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #6#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C12){(core::Object?) → core::bool} && #6#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C12){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
                                                return 22;
                                              }
                                              else {
                                                final dynamic #5#0 = o;
                                                if(#5#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #5#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && #5#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #5#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
                                                  return 23;
                                                }
                                                else {
                                                  dynamic a;
                                                  final dynamic #4#0 = o;
                                                  if(#4#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #4#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #4#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t23 = a = #4#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} in true)) {
                                                    return 24;
                                                  }
                                                  else {
                                                    core::int b;
                                                    final dynamic #3#0 = o;
                                                    function ##3#8#initializer() → dynamic
                                                      return #3#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
                                                    late final dynamic #3#8 = ##3#8#initializer(){() → dynamic};
                                                    if(#3#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #3#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #3#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#3#8 is{ForNonNullableByDefault} core::int && (let final core::int #t24 = b = #3#8{core::int} in true))) {
                                                      return 25;
                                                    }
                                                    else {
                                                      final dynamic #2#0 = o;
                                                      if(#2#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C12 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, core::Object?)}.$1{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, core::Object?)}.$2{core::Object?}) {
                                                        return 26;
                                                      }
                                                      else {
                                                        dynamic c;
                                                        final dynamic #1#0 = o;
                                                        if(#1#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #1#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && (let final core::Object? #t25 = c = #1#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true)) {
                                                          return 27;
                                                        }
                                                        else {
                                                          dynamic d;
                                                          final dynamic #0#0 = o;
                                                          if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final core::Object? #t26 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
                                                            return 28;
                                                          }
                                                          else {
                                                            return 0;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
static method switchStatement(dynamic o) → core::int {
  core::print("o = ${o}");
  #L1:
  {
    dynamic a;
    core::int b;
    dynamic c;
    dynamic d;
    final dynamic #0#0 = o;
    function ##0#4#initializer() → core::Object?
      return #0#0{({f: core::Object?})}.f{core::Object?};
    late final core::Object? #0#4 = ##0#4#initializer(){() → core::Object?};
    function ##0#15#initializer() → core::Object?
      return #0#0{({g: core::Object?})}.g{core::Object?};
    late final core::Object? #0#15 = ##0#15#initializer(){() → core::Object?};
    core::Object? #0#20;
    core::bool #0#20#isSet = false;
    core::Object? #0#23;
    core::bool #0#23#isSet = false;
    core::int #0#26;
    core::bool #0#26#isSet = false;
    function ##0#30#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#30 = ##0#30#initializer(){() → dynamic};
    function ##0#33#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#33 = ##0#33#initializer(){() → dynamic};
    function ##0#36#initializer() → core::bool
      return (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t27 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::>=}(#C7){(core::num) → core::bool};
    late final core::bool #0#36 = ##0#36#initializer(){() → core::bool};
    function ##0#43#initializer() → core::bool
      return (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t28 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::>=}(#C2){(core::num) → core::bool};
    late final core::bool #0#43 = ##0#43#initializer(){() → core::bool};
    function ##0#49#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}((#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t29 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic};
    late final dynamic #0#49 = ##0#49#initializer(){() → dynamic};
    function ##0#56#initializer() → core::List<dynamic>
      return #0#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #0#56 = ##0#56#initializer(){() → core::List<dynamic>};
    function ##0#59#initializer() → dynamic
      return #0#56.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#59 = ##0#59#initializer(){() → dynamic};
    function ##0#63#initializer() → dynamic
      return #0#56.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#63 = ##0#63#initializer(){() → dynamic};
    function ##0#71#initializer() → core::List<dynamic>
      return #0#0{core::List<dynamic>}.{core::List::sublist}(2, (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t30 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #0#71 = ##0#71#initializer(){() → core::List<dynamic>};
    function ##0#74#initializer() → dynamic
      return #0#71.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#74 = ##0#74#initializer(){() → dynamic};
    function ##0#78#initializer() → dynamic
      return #0#71.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#78 = ##0#78#initializer(){() → dynamic};
    function ##0#85#initializer() → core::int
      return #0#0{self::Class}.{self::Class::field}{core::int};
    late final core::int #0#85 = ##0#85#initializer(){() → core::int};
    core::bool #0#104;
    core::bool #0#104#isSet = false;
    function ##0#130#initializer() → dynamic
      return #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    late final dynamic #0#130 = ##0#130#initializer(){() → dynamic};
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0) {
      {
        return 1;
      }
    }
    else
      if(#0#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final core::int #t31 = #0#4 as{ForNonNullableByDefault} core::int in (#0#4 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final core::int #t32 = #0#4 as{ForNonNullableByDefault} core::int in (#0#4 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
        {
          return 2;
        }
      }
      else
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #0#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #0#0) {
          {
            return 3;
          }
        }
        else
          if(#0#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final core::int #t33 = #0#15 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #0#15 as{ForNonNullableByDefault} core::int)) {
            {
              return 4;
            }
          }
          else
            if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final core::Object? #t34 = (#0#20#isSet ?{core::Object?} #0#20{core::Object?} : let final core::bool* #t35 = #0#20#isSet = true in #0#20 = #0#0{({a: core::Object?})}.a{core::Object?})! in true)) {
              {
                return 5;
              }
            }
            else
              if(#0#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!((#0#23#isSet ?{core::Object?} #0#23{core::Object?} : let final core::bool* #t36 = #0#23#isSet = true in #0#23 = #0#0{({b: core::Object?})}.b{core::Object?}) == null) ?{core::bool} true : false)) {
                {
                  return 6;
                }
              }
              else
                if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t37 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#33) {
                  {
                    return 7;
                  }
                }
                else
                  if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#36 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#33) {
                    {
                      return 8;
                    }
                  }
                  else
                    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#43 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#33 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#49) {
                      {
                        return 9;
                      }
                    }
                    else
                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#36 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#33 && (#0#56.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t38 = #0#59 as{ForNonNullableByDefault} core::int in (#0#59 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t39 = #0#63 as{ForNonNullableByDefault} core::int in (#0#63 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
                        {
                          return 10;
                        }
                      }
                      else
                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#43 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#33 && (#0#71.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t40 = #0#74 as{ForNonNullableByDefault} core::int in (#0#74 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t41 = #0#78 as{ForNonNullableByDefault} core::int in (#0#78 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #0#49) {
                          {
                            return 11;
                          }
                        }
                        else
                          if(#0#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #0#85) {
                            {
                              return 12;
                            }
                          }
                          else
                            if(#0#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::finalField}{core::int}) {
                              {
                                return 13;
                              }
                            }
                            else
                              if(#0#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #0#85 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::getter}{core::int}) {
                                {
                                  return 14;
                                }
                              }
                              else
                                if(#0#0 is{ForNonNullableByDefault} self::Class) {
                                  {
                                    return 15;
                                  }
                                }
                                else
                                  if(#0#0 =={core::Object::==}{(core::Object) → core::bool} #C9) {
                                    {
                                      return 16;
                                    }
                                  }
                                  else
                                    if(#0#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#0#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
                                      {
                                        return 17;
                                      }
                                    }
                                    else
                                      if(#0#0 is{ForNonNullableByDefault} core::Map<core::int, core::int> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t42 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t43 = #0#26#isSet = true in #0#26 = #0#0{core::Map<core::int, core::int>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<core::int, core::int>}.{core::Map::containsKey}(#C3){(core::Object?) → core::bool} && #0#0{core::Map<core::int, core::int>}.{core::Map::[]}(#C3){(core::Object?) → core::int?}.{core::num::>=}(#C11){(core::num) → core::bool}) {
                                        {
                                          return 18;
                                        }
                                      }
                                      else
                                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t44 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t45 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && (let final dynamic #t46 = #0#30 in true)) {
                                          {
                                            return 19;
                                          }
                                        }
                                        else
                                          if(#0#0 is{ForNonNullableByDefault} core::bool) {
                                            {
                                              return 20;
                                            }
                                          }
                                          else
                                            if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t47 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C12) {
                                              {
                                                return 21;
                                              }
                                            }
                                            else
                                              if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t48 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t49 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C12){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C12){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
                                                {
                                                  return 22;
                                                }
                                              }
                                              else
                                                if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t50 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}).{core::num::>=}(#C1){(core::num) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
                                                  {
                                                    return 23;
                                                  }
                                                }
                                                else
                                                  if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t51 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t52 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t53 = a = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} in true)) {
                                                    {
                                                      return 24;
                                                    }
                                                  }
                                                  else
                                                    if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t54 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t55 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#0#130 is{ForNonNullableByDefault} core::int && (let final core::int #t56 = b = #0#130{core::int} in true))) {
                                                      {
                                                        return 25;
                                                      }
                                                    }
                                                    else
                                                      if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C12 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$2{core::Object?}) {
                                                        {
                                                          return 26;
                                                        }
                                                      }
                                                      else
                                                        if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} (#0#20#isSet ?{core::Object?} #0#20{core::Object?} : let final core::bool* #t57 = #0#20#isSet = true in #0#20 = #0#0{({a: core::Object?, b: core::Object?})}.a{core::Object?}) && (let final core::Object? #t58 = c = #0#23#isSet ?{core::Object?} #0#23{core::Object?} : let final core::bool* #t59 = #0#23#isSet = true in #0#23 = #0#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true)) {
                                                          {
                                                            return 27;
                                                          }
                                                        }
                                                        else
                                                          if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final core::Object? #t60 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
                                                            {
                                                              return 28;
                                                            }
                                                          }
                                                          else {
                                                            {
                                                              return 0;
                                                            }
                                                          }
  }
}
static method switchExpression(dynamic o) → core::int {
  core::print("o = ${o}");
  return block {
    core::int #t61;
    dynamic a;
    core::int b;
    dynamic c;
    dynamic d;
    final dynamic #0#0 = o;
    function ##0#4#initializer() → core::Object?
      return #0#0{({f: core::Object?})}.f{core::Object?};
    late final core::Object? #0#4 = ##0#4#initializer(){() → core::Object?};
    function ##0#15#initializer() → core::Object?
      return #0#0{({g: core::Object?})}.g{core::Object?};
    late final core::Object? #0#15 = ##0#15#initializer(){() → core::Object?};
    core::Object? #0#20;
    core::bool #0#20#isSet = false;
    core::Object? #0#23;
    core::bool #0#23#isSet = false;
    core::int #0#26;
    core::bool #0#26#isSet = false;
    function ##0#30#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#30 = ##0#30#initializer(){() → dynamic};
    function ##0#33#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#33 = ##0#33#initializer(){() → dynamic};
    function ##0#36#initializer() → core::bool
      return (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t62 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::>=}(#C7){(core::num) → core::bool};
    late final core::bool #0#36 = ##0#36#initializer(){() → core::bool};
    function ##0#43#initializer() → core::bool
      return (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t63 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::>=}(#C2){(core::num) → core::bool};
    late final core::bool #0#43 = ##0#43#initializer(){() → core::bool};
    function ##0#49#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}((#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t64 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic};
    late final dynamic #0#49 = ##0#49#initializer(){() → dynamic};
    function ##0#56#initializer() → core::List<dynamic>
      return #0#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #0#56 = ##0#56#initializer(){() → core::List<dynamic>};
    function ##0#59#initializer() → dynamic
      return #0#56.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#59 = ##0#59#initializer(){() → dynamic};
    function ##0#63#initializer() → dynamic
      return #0#56.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#63 = ##0#63#initializer(){() → dynamic};
    function ##0#71#initializer() → core::List<dynamic>
      return #0#0{core::List<dynamic>}.{core::List::sublist}(2, (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t65 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}).{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #0#71 = ##0#71#initializer(){() → core::List<dynamic>};
    function ##0#74#initializer() → dynamic
      return #0#71.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#74 = ##0#74#initializer(){() → dynamic};
    function ##0#78#initializer() → dynamic
      return #0#71.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#78 = ##0#78#initializer(){() → dynamic};
    function ##0#85#initializer() → core::int
      return #0#0{self::Class}.{self::Class::field}{core::int};
    late final core::int #0#85 = ##0#85#initializer(){() → core::int};
    core::bool #0#104;
    core::bool #0#104#isSet = false;
    function ##0#130#initializer() → dynamic
      return #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    late final dynamic #0#130 = ##0#130#initializer(){() → dynamic};
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0)
      #t61 = 1;
    else
      if(#0#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final core::int #t66 = #0#4 as{ForNonNullableByDefault} core::int in (#0#4 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final core::int #t67 = #0#4 as{ForNonNullableByDefault} core::int in (#0#4 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool})))
        #t61 = 2;
      else
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #0#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #0#0)
          #t61 = 3;
        else
          if(#0#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final core::int #t68 = #0#15 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #0#15 as{ForNonNullableByDefault} core::int))
            #t61 = 4;
          else
            if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final core::Object? #t69 = (#0#20#isSet ?{core::Object?} #0#20{core::Object?} : let final core::bool* #t70 = #0#20#isSet = true in #0#20 = #0#0{({a: core::Object?})}.a{core::Object?})! in true))
              #t61 = 5;
            else
              if(#0#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!((#0#23#isSet ?{core::Object?} #0#23{core::Object?} : let final core::bool* #t71 = #0#23#isSet = true in #0#23 = #0#0{({b: core::Object?})}.b{core::Object?}) == null) ?{core::bool} true : false))
                #t61 = 6;
              else
                if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t72 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#33)
                  #t61 = 7;
                else
                  if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#36 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#33)
                    #t61 = 8;
                  else
                    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#43 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#33 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#49)
                      #t61 = 9;
                    else
                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#36 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#33 && (#0#56.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t73 = #0#59 as{ForNonNullableByDefault} core::int in (#0#59 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t74 = #0#63 as{ForNonNullableByDefault} core::int in (#0#63 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})))
                        #t61 = 10;
                      else
                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#43 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#30 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#33 && (#0#71.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final core::int #t75 = #0#74 as{ForNonNullableByDefault} core::int in (#0#74 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final core::int #t76 = #0#78 as{ForNonNullableByDefault} core::int in (#0#78 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #0#49)
                          #t61 = 11;
                        else
                          if(#0#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #0#85)
                            #t61 = 12;
                          else
                            if(#0#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::finalField}{core::int})
                              #t61 = 13;
                            else
                              if(#0#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #0#85 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::getter}{core::int})
                                #t61 = 14;
                              else
                                if(#0#0 is{ForNonNullableByDefault} self::Class)
                                  #t61 = 15;
                                else
                                  if(#0#0 =={core::Object::==}{(core::Object) → core::bool} #C9)
                                    #t61 = 16;
                                  else
                                    if(#0#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#0#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10))
                                      #t61 = 17;
                                    else
                                      if(#0#0 is{ForNonNullableByDefault} core::Map<core::int, core::int> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t77 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t78 = #0#26#isSet = true in #0#26 = #0#0{core::Map<core::int, core::int>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<core::int, core::int>}.{core::Map::containsKey}(#C3){(core::Object?) → core::bool} && #0#0{core::Map<core::int, core::int>}.{core::Map::[]}(#C3){(core::Object?) → core::int?}.{core::num::>=}(#C11){(core::num) → core::bool})
                                        #t61 = 18;
                                      else
                                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t79 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t80 = #0#26#isSet = true in #0#26 = #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && (let final dynamic #t81 = #0#30 in true))
                                          #t61 = 19;
                                        else
                                          if(#0#0 is{ForNonNullableByDefault} core::bool)
                                            #t61 = 20;
                                          else
                                            if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t82 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C12)
                                              #t61 = 21;
                                            else
                                              if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t83 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t84 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C12){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C12){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int)
                                                #t61 = 22;
                                              else
                                                if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t85 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}).{core::num::>=}(#C1){(core::num) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String)
                                                  #t61 = 23;
                                                else
                                                  if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t86 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t87 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t88 = a = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} in true))
                                                    #t61 = 24;
                                                  else
                                                    if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#104#isSet ?{core::bool} #0#104{core::bool} : let final core::bool* #t89 = #0#104#isSet = true in #0#104 = (#0#26#isSet ?{core::int} #0#26{core::int} : let final core::bool* #t90 = #0#26#isSet = true in #0#26 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C1) && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#0#130 is{ForNonNullableByDefault} core::int && (let final core::int #t91 = b = #0#130{core::int} in true)))
                                                      #t61 = 25;
                                                    else
                                                      if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C12 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$2{core::Object?})
                                                        #t61 = 26;
                                                      else
                                                        if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} (#0#20#isSet ?{core::Object?} #0#20{core::Object?} : let final core::bool* #t92 = #0#20#isSet = true in #0#20 = #0#0{({a: core::Object?, b: core::Object?})}.a{core::Object?}) && (let final core::Object? #t93 = c = #0#23#isSet ?{core::Object?} #0#23{core::Object?} : let final core::bool* #t94 = #0#23#isSet = true in #0#23 = #0#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true))
                                                          #t61 = 27;
                                                        else
                                                          if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C12 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final core::Object? #t95 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int)
                                                            #t61 = 28;
                                                          else
                                                            if(true)
                                                              #t61 = 0;
  } =>#t61;
}
static method test(dynamic expected, dynamic value) → dynamic {
  self::expect(expected, self::ifCase(value));
  self::expect(expected, self::ifCaseElse(value));
  self::expect(expected, self::switchStatement(value));
  self::expect(expected, self::switchExpression(value));
}
static method main() → dynamic {
  self::test(0, 0);
  self::test(1, 1);
  self::test(2, ({f: 3}));
  self::test(2, ({f: 4}));
  self::test(3, 6);
  self::test(3, 7);
  self::test(4, ({g: 8}));
  self::test(5, ({a: 1}));
  self::test(6, ({b: 2}));
  self::test(0, ({b: null}));
  self::test(0, core::_GrowableList::_literal2<core::int>(1, 3));
  self::test(7, core::_GrowableList::_literal2<core::int>(1, 2));
  self::test(8, core::_GrowableList::_literal2<core::int>(2, 3));
  self::test(8, core::_GrowableList::_literal3<core::int>(2, 3, 4));
  self::test(8, core::_GrowableList::_literal4<core::int>(2, 3, 4, 5));
  self::test(9, core::_GrowableList::_literal3<core::int>(3, 4, 5));
  self::test(9, core::_GrowableList::_literal4<core::int>(3, 4, 6, 5));
  self::test(10, core::_GrowableList::_literal4<core::int>(4, 5, 0, 3));
  self::test(11, core::_GrowableList::_literal5<core::int>(5, 6, 0, 3, 7));
  self::test(12, new self::Class::•(1, 0));
  self::test(12, new self::Class::•(1, 1));
  self::test(12, new self::Class::•(1, 2));
  self::test(13, new self::Class::•(0, 2));
  self::test(13, new self::Class::•(2, 2));
  self::test(14, new self::Class::•(3, 4));
  self::test(15, new self::Class::•(3, 5));
  self::test(15, new self::Class::•(4, 5));
  self::test(16, "foo");
  self::test(17, ({e: "baz"}));
  self::test(0, ({e: "bar"}));
  self::test(18, <core::int, core::int>{5: 16});
  self::test(18, <core::int, core::int>{5: 17});
  self::test(19, core::_GrowableList::_literal1<core::bool>(true));
  self::test(19, core::_GrowableList::_literal1<core::String>("foo"));
  self::test(20, true);
  self::test(20, false);
  self::test(21, <dynamic, dynamic>{});
  self::test(22, <core::int, core::int>{0: 0});
  self::test(22, <core::int, core::int>{0: 1});
  self::test(0, <core::int, core::String>{0: "foo"});
  self::test(23, <core::int, core::String>{1: "foo"});
  self::test(23, <core::int, core::String>{1: "foo", 2: "bar"});
  self::test(0, <core::int, core::int>{1: 0});
  self::test(24, <core::int, core::String>{2: "foo"});
  self::test(24, <core::int, core::int>{2: 0});
  self::test(25, <core::int, core::int>{3: 0});
  self::test(0, <core::int, core::String>{3: "foo"});
  self::test(26, (0, 1));
  self::test(27, ({a: 0, b: 1}));
  self::test(27, ({a: 0, b: "foo"}));
  self::test(28, ({c: 0, d: 1}));
  self::test(28, ({c: 0, d: 2}));
  self::test(0, ({c: 0, d: "foo"}));
  core::print("success");
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  core::print("${expected} = ${actual} ?");
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual)) {
    throw "Expected ${expected}, actual ${actual}";
  }
}

constants  {
  #C1 = 1
  #C2 = 3
  #C3 = 5
  #C4 = 6
  #C5 = 7
  #C6 = 8
  #C7 = 2
  #C8 = 4
  #C9 = "foo"
  #C10 = "bar"
  #C11 = 16
  #C12 = 0
}

Extra constant evaluation status:
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:275:11 -> RecordConstant(const ({f: 3}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:276:11 -> RecordConstant(const ({f: 4}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:279:11 -> RecordConstant(const ({g: 8}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:281:11 -> RecordConstant(const ({a: 1}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:282:11 -> RecordConstant(const ({b: 2}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:283:11 -> RecordConstant(const ({b: null}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:305:12 -> RecordConstant(const ({e: "baz"}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:306:11 -> RecordConstant(const ({e: "bar"}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:329:12 -> RecordConstant(const (0, 1))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:330:12 -> RecordConstant(const ({a: 0, b: 1}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:331:12 -> RecordConstant(const ({a: 0, b: "foo"}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:332:12 -> RecordConstant(const ({c: 0, d: 1}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:333:12 -> RecordConstant(const ({c: 0, d: 2}))
Evaluated: RecordLiteral @ org-dartlang-testcase:///caching.dart:334:11 -> RecordConstant(const ({c: 0, d: "foo"}))
Extra constant evaluation: evaluated: 1883, effectively constant: 14
