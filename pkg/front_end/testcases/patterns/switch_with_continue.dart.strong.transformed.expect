library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic o) → core::int {
  #L1:
  {
    core::int #t1 = -1;
    dynamic a;
    final dynamic #0#0 = o;
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final dynamic #t2 = a = #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} in true))
      #t1 = 0;
    else
      if(#C2 =={core::num::==}{(core::Object) → core::bool} #0#0)
        #t1 = 1;
      else
        if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0)
          #t1 = 2;
        else
          if(#C3 =={core::num::==}{(core::Object) → core::bool} #0#0)
            #t1 = 3;
          else
            if(#C4 =={core::num::==}{(core::Object) → core::bool} #0#0)
              #t1 = 4;
            else
              if(#C5 =={core::num::==}{(core::Object) → core::bool} #0#0)
                #t1 = 5;
              else
                #t1 = 6;
    switch(#t1) {
      #L2:
      case #C2:
        {
          {
            return a as{TypeError,ForDynamic,ForNonNullableByDefault} core::int;
          }
        }
      #L3:
      case #C1:
        {
          {
            continue #L4;
          }
        }
      #L5:
      case #C3:
        {
          {
            return 1;
          }
        }
      #L4:
      case #C4:
        {
          {
            return 2;
          }
        }
      #L6:
      case #C5:
        {
          {
            continue #L7;
          }
        }
      #L8:
      case #C6:
        {
          {
            return 4;
          }
        }
      #L7:
      case #C7:
      default:
        {
          {
            return 1.{core::int::unary-}(){() → core::int};
          }
        }
    }
  }
}
static method main() → dynamic {
  self::expect(0, self::test(core::_GrowableList::_literal1<core::int>(0)));
  self::expect(1, self::test(core::_GrowableList::_literal1<core::int>(1)));
  self::expect(2, self::test(0));
  self::expect(1, self::test(1));
  self::expect(2, self::test(2));
  self::expect(1.{core::int::unary-}(){() → core::int}, self::test(3));
  self::expect(4, self::test(4));
  self::expect(1.{core::int::unary-}(){() → core::int}, self::test(5));
  self::expect(1.{core::int::unary-}(){() → core::int}, self::test(core::_GrowableList::•<dynamic>(0)));
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual)) {
    throw "Expected ${expected}, actual ${actual}";
  }
}

constants  {
  #C1 = 1
  #C2 = 0
  #C3 = 2
  #C4 = 3
  #C5 = 4
  #C6 = 5
  #C7 = 6
}

Extra constant evaluation status:
Evaluated: InstanceInvocation @ org-dartlang-testcase:///switch_with_continue.dart:23:14 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///switch_with_continue.dart:33:10 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///switch_with_continue.dart:35:10 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///switch_with_continue.dart:36:10 -> IntConstant(-1)
Extra constant evaluation: evaluated: 65, effectively constant: 4
