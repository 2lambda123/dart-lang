library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/typed_variable_named_as_inside_record_pattern_unnamed.dart:7:15: Error: The getter '$0' isn't defined for the class '(Object?, Object?)'.
//  - 'Object' is from 'dart:core'.
// Try correcting the name to the name of an existing getter, or defining a getter or field named '$0'.
//     case (int as, 2):
//               ^^
//
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    core::int as;
    final dynamic #0#0 = x;
    late final dynamic #0#1 = invalid-expression "pkg/front_end/testcases/patterns/typed_variable_named_as_inside_record_pattern_unnamed.dart:7:15: Error: The getter '\$0' isn't defined for the class '(Object?, Object?)'.
 - 'Object' is from 'dart:core'.
Try correcting the name to the name of an existing getter, or defining a getter or field named '\$0'.
    case (int as, 2):
              ^^" in #0#0{(core::Object?, core::Object?)}{<unresolved>}.$0;
    dynamic #t2;
    if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && (#0#1 is{ForNonNullableByDefault} core::int && (let final dynamic #t3 = as = #0#1{core::int} in true)) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
      #t1 = 0;
      #t2 = as;
    }
    switch(#t1) {
      #L2:
      case #C2:
        {
          core::int as = #t2{core::int};
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 2
  #C2 = 0
}
