library;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  {
    hoisted core::int y;
    final synthesized dynamic #0#0 = x;
    if(let final core::int #t1 = #0#0 as core::int in let final core::int #t2 = y = #0#0 as core::int in true) {
      return 0;
    }
  }
  {
    hoisted core::String y;
    final synthesized dynamic #1#0 = x;
    synthesized dynamic #1#6;
    synthesized core::bool #1#6#isSet = false;
    if(#1#0 is core::List<dynamic> && #1#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final core::String #t3 = (#1#6#isSet ?{dynamic} #1#6{dynamic} : let final core::bool* #t4 = #1#6#isSet = true in #1#6 = #1#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic}) as core::String in let final core::String #t5 = y = (#1#6#isSet ?{dynamic} #1#6{dynamic} : let final core::bool* #t6 = #1#6#isSet = true in #1#6 = #1#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic}) as core::String in true)) {
      return 1;
    }
  }
  {
    hoisted core::bool y;
    final synthesized dynamic #2#0 = x;
    synthesized dynamic #2#6;
    synthesized core::bool #2#6#isSet = false;
    if(#2#0 is core::List<dynamic> && #2#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C2 && (let final core::List<core::bool> #t7 = (#2#6#isSet ?{dynamic} #2#6{dynamic} : let final core::bool* #t8 = #2#6#isSet = true in #2#6 = #2#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic}) as core::List<core::bool> in ((#2#6#isSet ?{dynamic} #2#6{dynamic} : let final core::bool* #t9 = #2#6#isSet = true in #2#6 = #2#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic}) as core::List<core::bool>).{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final core::bool #t10 = y = ((#2#6#isSet ?{dynamic} #2#6{dynamic} : let final core::bool* #t11 = #2#6#isSet = true in #2#6 = #2#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic}) as core::List<core::bool>).{core::List::[]}(0){(core::int) → core::bool} in true)) && #C3 =={core::num::==}{(core::Object) → core::bool} #2#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
      return 2;
    }
  }
  {
    final synthesized dynamic #3#0 = x;
    if(let final core::int #t12 = #3#0 as core::int in #C1 =={core::num::==}{(core::Object) → core::bool} #3#0 as core::int) {
      return 3;
    }
  }
  {
    final synthesized core::int #4#0 = x{core::int};
    if(let final core::String #t13 = #4#0 as core::String in true) {
      return 4;
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 2
  #C3 = 0
}
