parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, extension, null, null, null, null, Instance of 'DirectiveContext')
      parseExtension(extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(type, extension, type)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionTypeDeclaration(extension, E)
          reportRecoverableError(E, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, E, E)
          listener: handleNoPrimaryConstructor(E, null)
          parseClassOrMixinOrEnumImplementsOpt(E)
            listener: handleImplements(null, 0)
          ensureBlock(E, null, extension type declaration)
            reportRecoverableError(E, Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], E, E)
            insertBlock(E)
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(E, DeclarationKind.ExtensionType, E)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, type, })
  listener: endTopLevelDeclaration(on)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(on)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(on)
      parseTopLevelMethod(}, null, null, }, Instance of 'SimpleType', null, A, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(on, typeReference)
        listener: handleNoTypeArguments(A)
        listener: handleType(on, null)
        ensureIdentifierPotentiallyRecovered(on, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(A, topLevelFunctionDeclaration)
        parseMethodTypeVar(A)
          listener: handleNoTypeVariables({)
        parseGetterOrFormalParameters(A, A, false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(A, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, A, A)
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(on, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(3, )
