Problems reported:

parser/patterns/error_recovery_after_question_suffix_in_expression:3:13: Expected an identifier, but got ':'.
    true ?  : 2;
            ^

parser/patterns/error_recovery_after_question_suffix_in_expression:6:1: Expected a declaration, but got '''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''''.
''', errors: [
^^^^^^^^^^^^^^^...

beginCompilationUnit(f)
  beginMetadataStar(f)
  endMetadataStar(0)
  beginTopLevelMember(f)
    beginTopLevelMethod(, null, null)
      handleNoType()
      handleIdentifier(f, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginTryStatement(try)
          beginBlock({, BlockKind(try statement))
            handleLiteralBool(true)
            beginConditionalExpression(?)
              handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
              handleIdentifier(, expression)
              handleNoTypeArguments(:)
              handleNoArguments(:)
              handleSend(, :)
              handleConditionalExpressionColon()
              handleLiteralInt(2)
            endConditionalExpression(?, :)
            handleExpressionStatement(;)
          endBlock(1, {, }, BlockKind(try statement))
          beginCatchClause(catch)
            beginFormalParameters((, MemberKind.Catch)
              beginMetadataStar(e)
              endMetadataStar(0)
              beginFormalParameter(e, MemberKind.Catch, null, null, null)
                handleNoType(()
                handleIdentifier(e, formalParameterDeclaration)
                handleFormalParameterWithoutValue())
              endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
            endFormalParameters(1, (, ), MemberKind.Catch)
          endCatchClause({)
          beginBlock({, BlockKind(catch clause))
          endBlock(0, {, }, BlockKind(catch clause))
          handleCatchBlock(null, catch, null)
        endTryStatement(1, try, null)
      endBlockFunctionBody(1, {, })
    endTopLevelMethod(f, null, })
  endTopLevelDeclaration(''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''')
  beginMetadataStar(''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''')
  endMetadataStar(0)
  beginTopLevelMember(''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''')
    handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got '''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''''., null, {lexeme: ''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse('''}], ''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''', ''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''')
    handleInvalidTopLevelDeclaration(''', errors: [
      error(ParserErrorCode.MISSING_IDENTIFIER, 26, 1),
    ]);
  }

  test_extractor_pattern_inside_cast() {
    _parse(''')
  endTopLevelDeclaration(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(C, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, C)
      handleNoType(C)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(int)
        endMetadataStar(0)
        beginMember()
          beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(?)
            handleType(int, ?)
            handleIdentifier(f, fieldDeclaration)
            handleNoFieldInitializer(;)
          endClassFields(null, null, null, null, null, null, null, 1, int, ;)
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(test)
  beginMetadataStar(test)
  endMetadataStar(0)
  beginTopLevelMember(test)
    beginTopLevelMethod(}, null, null)
      handleNoType(})
      handleIdentifier(test, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
        beginMetadataStar(dynamic)
        endMetadataStar(0)
        beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
          handleIdentifier(dynamic, typeReference)
          handleNoTypeArguments(x)
          handleType(dynamic, null)
          handleIdentifier(x, formalParameterDeclaration)
          handleFormalParameterWithoutValue())
        endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
      endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginSwitchStatement(switch)
          handleIdentifier(x, expression)
          handleNoTypeArguments())
          handleNoArguments())
          handleSend(x, ))
          handleParenthesizedCondition((, null)
          beginSwitchBlock({)
            beginCaseExpression(case)
              handleNoTypeArguments(()
              handleIdentifier(f, namedArgumentReference)
              handleLiteralInt(1)
              handleConstantPattern(null)
              handlePatternField(:)
              handleExtractorPatternFields(1, (, ))
              handleExtractorPattern(C, null, null)
              beginAsOperatorType(as)
                handleIdentifier(Object, typeReference)
                handleNoTypeArguments(:)
                handleType(Object, null)
              endAsOperatorType(as)
              handleCastPattern(as)
            endCaseExpression(:)
            handleCaseMatch(case, :)
            beginSwitchCase(0, 1, case)
              handleBreakStatement(false, break, ;)
            endSwitchCase(0, 1, null, null, 1, case, })
          endSwitchBlock(1, {, })
        endSwitchStatement(switch, })
      endBlockFunctionBody(1, {, })
    endTopLevelMethod(test, null, })
  endTopLevelDeclaration()
endCompilationUnit(4, )
