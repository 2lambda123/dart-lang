Problems reported:

parser/patterns/const_patterns:32:13: Only negation of a numeric literal is supported as a constant pattern.
      case -value: // Error
            ^^^^^

parser/patterns/const_patterns:34:13: Only negation of a numeric literal is supported as a constant pattern.
      case -local: // Error
            ^^^^^

parser/patterns/const_patterns:37:13: Only negation of a numeric literal is supported as a constant pattern.
      case -prefix.value: // Error
            ^^^^^^

parser/patterns/const_patterns:38:14: Expected ':' before this.
      case 1 + 2: // Error
             ^

parser/patterns/const_patterns:38:14: '+' is not a prefix operator.
      case 1 + 2: // Error
             ^

parser/patterns/const_patterns:38:16: Expected ';' after this.
      case 1 + 2: // Error
               ^

parser/patterns/const_patterns:38:17: Expected an identifier, but got ':'.
      case 1 + 2: // Error
                ^

parser/patterns/const_patterns:38:16: Expected ';' after this.
      case 1 + 2: // Error
               ^

parser/patterns/const_patterns:38:17: Unexpected token ':'.
      case 1 + 2: // Error
                ^

parser/patterns/const_patterns:39:14: Expected ':' before this.
      case 1 * 2: // Error
             ^

parser/patterns/const_patterns:39:14: Expected an identifier, but got '*'.
      case 1 * 2: // Error
             ^

parser/patterns/const_patterns:39:16: Expected ';' after this.
      case 1 * 2: // Error
               ^

parser/patterns/const_patterns:39:17: Expected an identifier, but got ':'.
      case 1 * 2: // Error
                ^

parser/patterns/const_patterns:39:16: Expected ';' after this.
      case 1 * 2: // Error
               ^

parser/patterns/const_patterns:39:17: Unexpected token ':'.
      case 1 * 2: // Error
                ^

parser/patterns/const_patterns:40:20: Expected ':' before this.
      case void fun() {}: // Error
                   ^

parser/patterns/const_patterns:40:24: Expected ';' after this.
      case void fun() {}: // Error
                       ^

parser/patterns/const_patterns:40:25: Expected an identifier, but got ':'.
      case void fun() {}: // Error
                        ^

parser/patterns/const_patterns:40:24: Expected ';' after this.
      case void fun() {}: // Error
                       ^

parser/patterns/const_patterns:40:25: Unexpected token ':'.
      case void fun() {}: // Error
                        ^

parser/patterns/const_patterns:41:12: `assert` can't be used as an expression.
      case assert(false): // Error
           ^^^^^^

parser/patterns/const_patterns:44:12: The unary operator ! is not supported as a constant pattern.
      case !false: // Error
           ^

parser/patterns/const_patterns:45:12: The unary operator ~ is not supported as a constant pattern.
      case ~0: // Error
           ^

parser/patterns/const_patterns:59:18: Duplicate 'const' keyword in constant expression.
      case const const Class(): // Error
                 ^^^^^

parser/patterns/const_patterns:60:18: Duplicate 'const' keyword in constant expression.
      case const const Class(0): // Error
                 ^^^^^

parser/patterns/const_patterns:61:18: Duplicate 'const' keyword in constant expression.
      case const const GenericClass(): // Error
                 ^^^^^

parser/patterns/const_patterns:62:18: Duplicate 'const' keyword in constant expression.
      case const const GenericClass(a: 0): // Error
                 ^^^^^

parser/patterns/const_patterns:63:18: Duplicate 'const' keyword in constant expression.
      case const const GenericClass<int>(): // Error
                 ^^^^^

parser/patterns/const_patterns:64:18: Duplicate 'const' keyword in constant expression.
      case const const GenericClass<int>(a: 0): // Error
                 ^^^^^

parser/patterns/const_patterns:65:18: Duplicate 'const' keyword in constant expression.
      case const const []: // Error
                 ^^^^^

parser/patterns/const_patterns:66:18: Duplicate 'const' keyword in constant expression.
      case const const <int>[]: // Error
                 ^^^^^

parser/patterns/const_patterns:67:18: Duplicate 'const' keyword in constant expression.
      case const const {}: // Error
                 ^^^^^

parser/patterns/const_patterns:68:18: Duplicate 'const' keyword in constant expression.
      case const const <int, String>{}: // Error
                 ^^^^^

parser/patterns/const_patterns:71:19: The empty record literal is not supported as a constant pattern.
      case const (): // Error
                  ^

parser/patterns/const_patterns:72:18: Duplicate 'const' keyword in constant expression.
      case const const (): // Error
                 ^^^^^

parser/patterns/const_patterns:78:24: This expression is not supported as a constant pattern.
      case GenericClass<int>: // Error
                       ^

parser/patterns/const_patterns:79:31: This expression is not supported as a constant pattern.
      case prefix.GenericClass<int>: // Error
                              ^

parser/patterns/const_patterns:80:24: This expression is not supported as a constant pattern.
      case GenericClass<int>.new: // Error
                       ^

parser/patterns/const_patterns:81:31: This expression is not supported as a constant pattern.
      case prefix.GenericClass<int>.new: // Error
                              ^

beginCompilationUnit(import)
  beginMetadataStar(import)
  endMetadataStar(0)
  beginUncategorizedTopLevelDeclaration(import)
    beginImport(import)
      beginLiteralString('const_patterns.dart')
      endLiteralString(0, as)
      beginConditionalUris(as)
      endConditionalUris(0)
      handleIdentifier(prefix, importPrefixDeclaration)
      handleImportPrefix(null, as)
      beginCombinators(;)
      endCombinators(0)
    endImport(import, null, ;)
  endTopLevelDeclaration(const)
  beginMetadataStar(const)
  endMetadataStar(0)
  beginTopLevelMember(const)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, const, ;)
      handleIdentifier(int, typeReference)
      handleNoTypeArguments(value)
      handleType(int, null)
      handleIdentifier(value, topLevelVariableDeclaration)
      beginFieldInitializer(=)
        handleLiteralInt(42)
      endFieldInitializer(=, ;)
    endTopLevelFields(null, null, null, null, const, 1, const, ;)
  endTopLevelDeclaration(void)
  beginMetadataStar(void)
  endMetadataStar(0)
  beginTopLevelMember(void)
    beginTopLevelMethod(;, null, null)
      handleVoidKeyword(void)
      handleIdentifier(func, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(void, null, })
  endTopLevelDeclaration(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(Class, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, Class)
      handleNoType(Class)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(const)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, const, null, Class)
            handleNoType(const)
            handleIdentifier(Class, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
              beginOptionalFormalParameters([)
                beginMetadataStar(a)
                endMetadataStar(0)
                beginFormalParameter(a, MemberKind.NonStaticMethod, null, null, null)
                  handleNoType([)
                  handleIdentifier(a, formalParameterDeclaration)
                  handleFormalParameterWithoutValue(])
                endFormalParameter(null, null, null, a, null, null, FormalParameterKind.optionalPositional, MemberKind.NonStaticMethod)
              endOptionalFormalParameters(1, [, ])
            endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            handleEmptyFunctionBody(;)
          endClassConstructor(null, const, (, null, ;)
        endMember()
        beginMetadataStar(call)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, call)
            handleNoType(;)
            handleIdentifier(call, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, call, (, null, })
        endMember()
        beginMetadataStar(test)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, test)
            handleNoType(})
            handleIdentifier(test, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
              beginMetadataStar(o)
              endMetadataStar(0)
              beginFormalParameter(o, MemberKind.NonStaticMethod, null, null, null)
                handleNoType(()
                handleIdentifier(o, formalParameterDeclaration)
                handleFormalParameterWithoutValue())
              endFormalParameter(null, null, null, o, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
            endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(async, null)
            beginBlockFunctionBody({)
              beginMetadataStar(const)
              endMetadataStar(0)
              handleIdentifier(dynamic, typeReference)
              handleNoTypeArguments(local)
              handleType(dynamic, null)
              beginVariablesDeclaration(local, null, const)
                handleIdentifier(local, localVariableDeclaration)
                beginInitializedIdentifier(local)
                  beginVariableInitializer(=)
                    handleLiteralInt(0)
                  endVariableInitializer(=)
                endInitializedIdentifier(local)
              endVariablesDeclaration(1, ;)
              beginMetadataStar(dynamic)
              endMetadataStar(0)
              handleIdentifier(dynamic, typeReference)
              handleNoTypeArguments(variable)
              handleType(dynamic, null)
              beginVariablesDeclaration(variable, null, null)
                handleIdentifier(variable, localVariableDeclaration)
                beginInitializedIdentifier(variable)
                  beginVariableInitializer(=)
                    handleLiteralInt(0)
                  endVariableInitializer(=)
                endInitializedIdentifier(variable)
              endVariablesDeclaration(1, ;)
              beginSwitchStatement(switch)
                handleIdentifier(o, expression)
                handleNoTypeArguments())
                handleNoArguments())
                handleSend(o, ))
                handleParenthesizedCondition((, null, null)
                beginSwitchBlock({)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralBool(true)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(true)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralNull(null)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(null)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleThisExpression(this, expression)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(this)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleThisExpression(this, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                      endArguments(0, (, ))
                      handleSend(this, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleSuperExpression(super, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                      endArguments(0, (, ))
                      handleSend(super, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralInt(42)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(42)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralInt(42)
                      handleUnaryPrefixExpression(-)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(42)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralDouble(42.5)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(42.5)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralDouble(42.5)
                      handleUnaryPrefixExpression(-)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(42.5)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginLiteralString('foo')
                      endLiteralString(0, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause('foo')
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginLiteralString('foo')
                      endLiteralString(0, 'bar')
                      beginLiteralString('bar')
                      endLiteralString(0, :)
                      handleStringJuxtaposition(case, 2)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause('bar')
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(value, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(value, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(value)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleRecoverableError(InvalidConstantPatternNegation, value, value)
                      handleIdentifier(value, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(value, :)
                      handleUnaryPrefixExpression(-)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(value)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(local, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(local, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(local)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleRecoverableError(InvalidConstantPatternNegation, local, local)
                      handleIdentifier(local, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(local, :)
                      handleUnaryPrefixExpression(-)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(local)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(func, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(func, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(func)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(prefix, expression)
                      handleNoTypeArguments(.)
                      handleNoArguments(.)
                      handleSend(prefix, .)
                      handleIdentifier(value, expressionContinuation)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(value, :)
                      handleEndingBinaryExpression(.)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(value)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleRecoverableError(InvalidConstantPatternNegation, prefix, prefix)
                      handleIdentifier(prefix, expression)
                      handleNoTypeArguments(.)
                      handleNoArguments(.)
                      handleSend(prefix, .)
                      handleIdentifier(value, expressionContinuation)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(value, :)
                      handleEndingBinaryExpression(.)
                      handleUnaryPrefixExpression(-)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(value)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralInt(1)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(1)
                    handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], +, +)
                  endCaseExpression(case, null, :)
                  beginSwitchCase(0, 19, case)
                    handleRecoverableError(UnsupportedPrefixPlus, +, +)
                    handleIdentifier(, expression)
                    handleNoTypeArguments(+)
                    handleNoArguments(+)
                    handleSend(, +)
                    beginBinaryExpression(+)
                      handleLiteralInt(2)
                    endBinaryExpression(+)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
                    handleIdentifier(, expression)
                    handleNoTypeArguments(:)
                    handleNoArguments(:)
                    handleSend(, :)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[UnexpectedToken, Unexpected token ':'., null, {lexeme: :}], :, :)
                  endSwitchCase(0, 19, null, null, 2, case, case)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleLiteralInt(1)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(1)
                    handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], *, *)
                  endCaseExpression(case, null, :)
                  beginSwitchCase(0, 1, case)
                    handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '*'., Try inserting an identifier before '*'., {lexeme: *}], *, *)
                    handleIdentifier(, expression)
                    handleNoTypeArguments(*)
                    handleNoArguments(*)
                    handleSend(, *)
                    beginBinaryExpression(*)
                      handleLiteralInt(2)
                    endBinaryExpression(*)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
                    handleIdentifier(, expression)
                    handleNoTypeArguments(:)
                    handleNoArguments(:)
                    handleSend(, :)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[UnexpectedToken, Unexpected token ':'., null, {lexeme: :}], :, :)
                  endSwitchCase(0, 1, null, null, 2, case, case)
                  beginCaseExpression(case)
                    handleVoidKeyword(void)
                    handleVariablePattern(null, fun, false)
                    handleSwitchCaseNoWhenClause(fun)
                    handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], (, ()
                  endCaseExpression(case, null, :)
                  beginSwitchCase(0, 1, case)
                    handleNoTypeVariables(()
                    beginFunctionExpression(()
                      beginFormalParameters((, MemberKind.Local)
                      endFormalParameters(0, (, ), MemberKind.Local)
                      handleAsyncModifier(null, null)
                      beginBlockFunctionBody({)
                      endBlockFunctionBody(0, {, })
                    endFunctionExpression((, :)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], }, })
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
                    handleIdentifier(, expression)
                    handleNoTypeArguments(:)
                    handleNoArguments(:)
                    handleSend(, :)
                    handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], }, })
                    handleExpressionStatement(;)
                    handleRecoverableError(Message[UnexpectedToken, Unexpected token ':'., null, {lexeme: :}], :, :)
                  endSwitchCase(0, 1, null, null, 2, case, case)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginAssert(assert, Assert.Expression)
                        handleLiteralBool(false)
                        handleRecoverableError(AssertAsExpression, assert, assert)
                      endAssert(assert, Assert.Expression, (, null, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginSwitchExpression(switch)
                        handleIdentifier(o, expression)
                        handleNoTypeArguments())
                        handleNoArguments())
                        handleSend(o, ))
                        handleParenthesizedCondition((, null, null)
                        beginSwitchExpressionBlock({)
                          beginSwitchExpressionCase()
                            handleNoType({)
                            handleVariablePattern(null, _, false)
                            handleSwitchExpressionCasePattern(_)
                            handleLiteralBool(true)
                          endSwitchExpressionCase(null, =>, true)
                        endSwitchExpressionBlock(1, {, })
                      endSwitchExpression(switch, })
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(})
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginAwaitExpression(await)
                        handleLiteralInt(0)
                      endAwaitExpression(await, :)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(0)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleRecoverableError(Message[InvalidConstantPatternUnary, The unary operator ! is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: !}], !, !)
                      handleLiteralBool(false)
                      handleUnaryPrefixExpression(!)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(false)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleRecoverableError(Message[InvalidConstantPatternUnary, The unary operator ~ is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: ~}], ~, ~)
                      handleLiteralInt(0)
                      handleUnaryPrefixExpression(~)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(0)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(variable, expression)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(variable, :)
                      handleUnaryPrefixAssignmentExpression(++)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(variable)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(Class, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                      endArguments(0, (, ))
                      handleSend(Class, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(Class, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                        handleLiteralInt(0)
                      endArguments(1, (, ))
                      handleSend(Class, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(GenericClass, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                      endArguments(0, (, ))
                      handleSend(GenericClass, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(GenericClass, expression)
                      handleNoTypeArguments(()
                      beginArguments(()
                        handleIdentifier(a, namedArgumentReference)
                        handleLiteralInt(0)
                        handleNamedArgument(:)
                      endArguments(1, (, ))
                      handleSend(GenericClass, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(GenericClass, expression)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      beginArguments(()
                      endArguments(0, (, ))
                      handleSend(GenericClass, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleIdentifier(GenericClass, expression)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      beginArguments(()
                        handleIdentifier(a, namedArgumentReference)
                        handleLiteralInt(0)
                        handleNamedArgument(:)
                      endArguments(1, (, ))
                      handleSend(GenericClass, :)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginImplicitCreationExpression(GenericClass)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          beginTypeArguments(<)
                            handleIdentifier(int, typeReference)
                            handleNoTypeArguments(>)
                            handleType(int, null)
                          endTypeArguments(1, <, >)
                          handleNewAsIdentifier(new)
                          handleIdentifier(new, constructorReferenceContinuationAfterTypeArguments)
                        endConstructorReference(GenericClass, ., (, ConstructorReferenceContext.Implicit)
                        beginArguments(()
                        endArguments(0, (, ))
                      endImplicitCreationExpression(GenericClass, <)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginImplicitCreationExpression(GenericClass)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          beginTypeArguments(<)
                            handleIdentifier(int, typeReference)
                            handleNoTypeArguments(>)
                            handleType(int, null)
                          endTypeArguments(1, <, >)
                          handleNewAsIdentifier(new)
                          handleIdentifier(new, constructorReferenceContinuationAfterTypeArguments)
                        endConstructorReference(GenericClass, ., (, ConstructorReferenceContext.Implicit)
                        beginArguments(()
                          handleIdentifier(a, namedArgumentReference)
                          handleLiteralInt(1)
                          handleNamedArgument(:)
                        endArguments(1, (, ))
                      endImplicitCreationExpression(GenericClass, <)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleNoTypeArguments([])
                      handleLiteralList(0, [, null, ])
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(])
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      handleLiteralList(0, [, null, ])
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(])
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleNoTypeArguments({)
                      handleLiteralSetOrMap(0, {, null, }, false)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(})
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(,)
                        handleType(int, null)
                        handleIdentifier(String, typeReference)
                        handleNoTypeArguments(>)
                        handleType(String, null)
                      endTypeArguments(2, <, >)
                      handleLiteralSetOrMap(0, {, null, }, false)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(})
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(Class, constructorReference)
                        beginConstructorReference(Class)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(Class, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                        endArguments(0, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(Class, constructorReference)
                        beginConstructorReference(Class)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(Class, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                          handleLiteralInt(0)
                        endArguments(1, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(GenericClass, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                        endArguments(0, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(GenericClass, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                          handleIdentifier(a, namedArgumentReference)
                          handleLiteralInt(0)
                          handleNamedArgument(:)
                        endArguments(1, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          beginTypeArguments(<)
                            handleIdentifier(int, typeReference)
                            handleNoTypeArguments(>)
                            handleType(int, null)
                          endTypeArguments(1, <, >)
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(GenericClass, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                        endArguments(0, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstExpression(const)
                        handleIdentifier(GenericClass, constructorReference)
                        beginConstructorReference(GenericClass)
                          beginTypeArguments(<)
                            handleIdentifier(int, typeReference)
                            handleNoTypeArguments(>)
                            handleType(int, null)
                          endTypeArguments(1, <, >)
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(GenericClass, null, (, ConstructorReferenceContext.Const)
                        beginArguments(()
                          handleIdentifier(a, namedArgumentReference)
                          handleLiteralInt(0)
                          handleNamedArgument(:)
                        endArguments(1, (, ))
                      endConstExpression(const)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstLiteral([])
                        handleNoTypeArguments([])
                        handleLiteralList(0, [, const, ])
                      endConstLiteral(:)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(])
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstLiteral(<)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(>)
                          handleType(int, null)
                        endTypeArguments(1, <, >)
                        handleLiteralList(0, [, const, ])
                      endConstLiteral(:)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(])
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstLiteral({)
                        handleNoTypeArguments({)
                        handleLiteralSetOrMap(0, {, const, }, false)
                      endConstLiteral(:)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(})
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstLiteral(<)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(,)
                          handleType(int, null)
                          handleIdentifier(String, typeReference)
                          handleNoTypeArguments(>)
                          handleType(String, null)
                        endTypeArguments(2, <, >)
                        handleLiteralSetOrMap(0, {, const, }, false)
                      endConstLiteral(:)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause(})
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginNewExpression(new)
                        handleIdentifier(Class, constructorReference)
                        beginConstructorReference(Class)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(Class, null, (, ConstructorReferenceContext.New)
                        beginArguments(()
                        endArguments(0, (, ))
                      endNewExpression(new)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      beginNewExpression(new)
                        handleIdentifier(Class, constructorReference)
                        beginConstructorReference(Class)
                          handleNoTypeArguments(()
                          handleNoConstructorReferenceContinuationAfterTypeArguments(()
                        endConstructorReference(Class, null, (, ConstructorReferenceContext.New)
                        beginArguments(()
                        endArguments(0, (, ))
                      endNewExpression(new)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleRecoverableError(InvalidConstantPatternEmptyRecordLiteral, ), ))
                      endRecordLiteral((, 0, null)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      handleRecoverableError(InvalidConstantPatternDuplicateConst, const, const)
                      beginConstLiteral(()
                        beginParenthesizedExpressionOrRecordLiteral(()
                        endRecordLiteral((, 0, const)
                      endConstLiteral(:)
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleLiteralInt(1)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleLiteralInt(1)
                        handleUnaryPrefixExpression(-)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(value, expression)
                        handleNoTypeArguments())
                        handleNoArguments())
                        handleSend(value, ))
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(value, expression)
                        handleNoTypeArguments())
                        handleNoArguments())
                        handleSend(value, ))
                        handleUnaryPrefixExpression(-)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleLiteralInt(1)
                        beginBinaryExpression(+)
                          handleLiteralInt(2)
                        endBinaryExpression(+)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(GenericClass, expression)
                      handleNoTypeArguments(<)
                      handleNoArguments(<)
                      handleSend(GenericClass, <)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      handleRecoverableError(InvalidConstantPatternGeneric, <, <)
                      handleTypeArgumentApplication(<)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(>)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(prefix, expression)
                      handleNoTypeArguments(.)
                      handleNoArguments(.)
                      handleSend(prefix, .)
                      handleIdentifier(GenericClass, expressionContinuation)
                      handleNoTypeArguments(<)
                      handleNoArguments(<)
                      handleSend(GenericClass, <)
                      handleEndingBinaryExpression(.)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      handleRecoverableError(InvalidConstantPatternGeneric, <, <)
                      handleTypeArgumentApplication(<)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(>)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(GenericClass, expression)
                      handleNoTypeArguments(<)
                      handleNoArguments(<)
                      handleSend(GenericClass, <)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      handleRecoverableError(InvalidConstantPatternGeneric, <, <)
                      handleTypeArgumentApplication(<)
                      handleNewAsIdentifier(new)
                      handleIdentifier(new, expressionContinuation)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(new, :)
                      handleEndingBinaryExpression(.)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(new)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(null)
                      handleIdentifier(prefix, expression)
                      handleNoTypeArguments(.)
                      handleNoArguments(.)
                      handleSend(prefix, .)
                      handleIdentifier(GenericClass, expressionContinuation)
                      handleNoTypeArguments(<)
                      handleNoArguments(<)
                      handleSend(GenericClass, <)
                      handleEndingBinaryExpression(.)
                      beginTypeArguments(<)
                        handleIdentifier(int, typeReference)
                        handleNoTypeArguments(>)
                        handleType(int, null)
                      endTypeArguments(1, <, >)
                      handleRecoverableError(InvalidConstantPatternGeneric, <, <)
                      handleTypeArgumentApplication(<)
                      handleNewAsIdentifier(new)
                      handleIdentifier(new, expressionContinuation)
                      handleNoTypeArguments(:)
                      handleNoArguments(:)
                      handleSend(new, :)
                      handleEndingBinaryExpression(.)
                    endConstantPattern(null)
                    handleSwitchCaseNoWhenClause(new)
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(GenericClass, expression)
                        handleNoTypeArguments(<)
                        handleNoArguments(<)
                        handleSend(GenericClass, <)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(>)
                          handleType(int, null)
                        endTypeArguments(1, <, >)
                        handleTypeArgumentApplication(<)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(prefix, expression)
                        handleNoTypeArguments(.)
                        handleNoArguments(.)
                        handleSend(prefix, .)
                        handleIdentifier(GenericClass, expressionContinuation)
                        handleNoTypeArguments(<)
                        handleNoArguments(<)
                        handleSend(GenericClass, <)
                        handleEndingBinaryExpression(.)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(>)
                          handleType(int, null)
                        endTypeArguments(1, <, >)
                        handleTypeArgumentApplication(<)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(GenericClass, expression)
                        handleNoTypeArguments(<)
                        handleNoArguments(<)
                        handleSend(GenericClass, <)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(>)
                          handleType(int, null)
                        endTypeArguments(1, <, >)
                        handleTypeArgumentApplication(<)
                        handleNewAsIdentifier(new)
                        handleIdentifier(new, expressionContinuation)
                        handleNoTypeArguments())
                        handleNoArguments())
                        handleSend(new, ))
                        handleEndingBinaryExpression(.)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginCaseExpression(case)
                    beginConstantPattern(const)
                      beginParenthesizedExpressionOrRecordLiteral(()
                        handleIdentifier(prefix, expression)
                        handleNoTypeArguments(.)
                        handleNoArguments(.)
                        handleSend(prefix, .)
                        handleIdentifier(GenericClass, expressionContinuation)
                        handleNoTypeArguments(<)
                        handleNoArguments(<)
                        handleSend(GenericClass, <)
                        handleEndingBinaryExpression(.)
                        beginTypeArguments(<)
                          handleIdentifier(int, typeReference)
                          handleNoTypeArguments(>)
                          handleType(int, null)
                        endTypeArguments(1, <, >)
                        handleTypeArgumentApplication(<)
                        handleNewAsIdentifier(new)
                        handleIdentifier(new, expressionContinuation)
                        handleNoTypeArguments())
                        handleNoArguments())
                        handleSend(new, ))
                        handleEndingBinaryExpression(.)
                      endParenthesizedExpression(()
                    endConstantPattern(const)
                    handleSwitchCaseNoWhenClause())
                  endCaseExpression(case, null, :)
                  beginSwitchCase(0, 45, case)
                    handleIdentifier(print, expression)
                    handleNoTypeArguments(()
                    beginArguments(()
                      handleLiteralInt(0)
                    endArguments(1, (, ))
                    handleSend(print, ;)
                    handleExpressionStatement(;)
                  endSwitchCase(0, 45, null, null, 1, case, })
                endSwitchBlock(4, {, })
              endSwitchStatement(switch, })
            endBlockFunctionBody(3, {, })
          endClassMethod(null, test, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 3, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(GenericClass, classOrMixinDeclaration)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, GenericClass)
      handleNoType(>)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(const)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, const, null, GenericClass)
            handleNoType(const)
            handleIdentifier(GenericClass, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
              beginOptionalFormalParameters({)
                beginMetadataStar(a)
                endMetadataStar(0)
                beginFormalParameter(a, MemberKind.NonStaticMethod, null, null, null)
                  handleNoType({)
                  handleIdentifier(a, formalParameterDeclaration)
                  handleFormalParameterWithoutValue(})
                endFormalParameter(null, null, null, a, null, null, FormalParameterKind.optionalNamed, MemberKind.NonStaticMethod)
              endOptionalFormalParameters(1, {, })
            endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            handleEmptyFunctionBody(;)
          endClassConstructor(null, const, (, null, ;)
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration()
endCompilationUnit(5, )
