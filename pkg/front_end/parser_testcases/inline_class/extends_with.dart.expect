Problems reported:

parser/inline_class/extends_with:1:25: A extension type declaration must have a body, even if it is empty.
extension type ET1(int i) extends Foo {}
                        ^

parser/inline_class/extends_with:1:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET1(int i) extends Foo {}
                          ^^^^^^^

parser/inline_class/extends_with:1:27: 'extends' can't be used as an identifier because it's a keyword.
extension type ET1(int i) extends Foo {}
                          ^^^^^^^

parser/inline_class/extends_with:1:27: Expected ';' after this.
extension type ET1(int i) extends Foo {}
                          ^^^^^^^

parser/inline_class/extends_with:1:35: A function declaration needs an explicit list of parameters.
extension type ET1(int i) extends Foo {}
                                  ^^^

parser/inline_class/extends_with:2:25: A extension type declaration must have a body, even if it is empty.
extension type ET2(int i) with Foo {}
                        ^

parser/inline_class/extends_with:2:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET2(int i) with Foo {}
                          ^^^^

parser/inline_class/extends_with:2:27: 'with' can't be used as an identifier because it's a keyword.
extension type ET2(int i) with Foo {}
                          ^^^^

parser/inline_class/extends_with:2:27: Expected ';' after this.
extension type ET2(int i) with Foo {}
                          ^^^^

parser/inline_class/extends_with:2:32: A function declaration needs an explicit list of parameters.
extension type ET2(int i) with Foo {}
                               ^^^

parser/inline_class/extends_with:3:25: A extension type declaration must have a body, even if it is empty.
extension type ET3(int i) with Foo, Bar {}
                        ^

parser/inline_class/extends_with:3:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET3(int i) with Foo, Bar {}
                          ^^^^

parser/inline_class/extends_with:3:27: 'with' can't be used as an identifier because it's a keyword.
extension type ET3(int i) with Foo, Bar {}
                          ^^^^

parser/inline_class/extends_with:3:27: Expected ';' after this.
extension type ET3(int i) with Foo, Bar {}
                          ^^^^

parser/inline_class/extends_with:3:32: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET3(int i) with Foo, Bar {}
                               ^^^

parser/inline_class/extends_with:3:37: Expected ';' after this.
extension type ET3(int i) with Foo, Bar {}
                                    ^^^

parser/inline_class/extends_with:3:41: Expected a declaration, but got '{'.
extension type ET3(int i) with Foo, Bar {}
                                        ^

parser/inline_class/extends_with:4:25: A extension type declaration must have a body, even if it is empty.
extension type ET4(int i) extends Foo with Bar {}
                        ^

parser/inline_class/extends_with:4:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET4(int i) extends Foo with Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:4:27: 'extends' can't be used as an identifier because it's a keyword.
extension type ET4(int i) extends Foo with Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:4:27: Expected ';' after this.
extension type ET4(int i) extends Foo with Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:4:35: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET4(int i) extends Foo with Bar {}
                                  ^^^

parser/inline_class/extends_with:4:35: Expected ';' after this.
extension type ET4(int i) extends Foo with Bar {}
                                  ^^^

parser/inline_class/extends_with:4:39: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET4(int i) extends Foo with Bar {}
                                      ^^^^

parser/inline_class/extends_with:4:39: 'with' can't be used as an identifier because it's a keyword.
extension type ET4(int i) extends Foo with Bar {}
                                      ^^^^

parser/inline_class/extends_with:4:39: Expected ';' after this.
extension type ET4(int i) extends Foo with Bar {}
                                      ^^^^

parser/inline_class/extends_with:4:44: A function declaration needs an explicit list of parameters.
extension type ET4(int i) extends Foo with Bar {}
                                           ^^^

parser/inline_class/extends_with:5:25: A extension type declaration must have a body, even if it is empty.
extension type ET5(int i) extends Foo with Bar, Baz {}
                        ^

parser/inline_class/extends_with:5:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET5(int i) extends Foo with Bar, Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:5:27: 'extends' can't be used as an identifier because it's a keyword.
extension type ET5(int i) extends Foo with Bar, Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:5:27: Expected ';' after this.
extension type ET5(int i) extends Foo with Bar, Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:5:35: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                  ^^^

parser/inline_class/extends_with:5:35: Expected ';' after this.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                  ^^^

parser/inline_class/extends_with:5:39: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                      ^^^^

parser/inline_class/extends_with:5:39: 'with' can't be used as an identifier because it's a keyword.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                      ^^^^

parser/inline_class/extends_with:5:39: Expected ';' after this.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                      ^^^^

parser/inline_class/extends_with:5:44: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                           ^^^

parser/inline_class/extends_with:5:49: Expected ';' after this.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                                ^^^

parser/inline_class/extends_with:5:53: Expected a declaration, but got '{'.
extension type ET5(int i) extends Foo with Bar, Baz {}
                                                    ^

parser/inline_class/extends_with:6:25: A extension type declaration must have a body, even if it is empty.
extension type ET6(int i) extends Foo implements Bar {}
                        ^

parser/inline_class/extends_with:6:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET6(int i) extends Foo implements Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:6:27: 'extends' can't be used as an identifier because it's a keyword.
extension type ET6(int i) extends Foo implements Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:6:27: Expected ';' after this.
extension type ET6(int i) extends Foo implements Bar {}
                          ^^^^^^^

parser/inline_class/extends_with:6:39: Expected ';' after this.
extension type ET6(int i) extends Foo implements Bar {}
                                      ^^^^^^^^^^

parser/inline_class/extends_with:6:50: A function declaration needs an explicit list of parameters.
extension type ET6(int i) extends Foo implements Bar {}
                                                 ^^^

parser/inline_class/extends_with:7:25: A extension type declaration must have a body, even if it is empty.
extension type ET7(int i) with Foo implements Bar {}
                        ^

parser/inline_class/extends_with:7:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET7(int i) with Foo implements Bar {}
                          ^^^^

parser/inline_class/extends_with:7:27: 'with' can't be used as an identifier because it's a keyword.
extension type ET7(int i) with Foo implements Bar {}
                          ^^^^

parser/inline_class/extends_with:7:27: Expected ';' after this.
extension type ET7(int i) with Foo implements Bar {}
                          ^^^^

parser/inline_class/extends_with:7:36: Expected ';' after this.
extension type ET7(int i) with Foo implements Bar {}
                                   ^^^^^^^^^^

parser/inline_class/extends_with:7:47: A function declaration needs an explicit list of parameters.
extension type ET7(int i) with Foo implements Bar {}
                                              ^^^

parser/inline_class/extends_with:8:25: A extension type declaration must have a body, even if it is empty.
extension type ET8(int i) with Foo, Bar implements Baz {}
                        ^

parser/inline_class/extends_with:8:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET8(int i) with Foo, Bar implements Baz {}
                          ^^^^

parser/inline_class/extends_with:8:27: 'with' can't be used as an identifier because it's a keyword.
extension type ET8(int i) with Foo, Bar implements Baz {}
                          ^^^^

parser/inline_class/extends_with:8:27: Expected ';' after this.
extension type ET8(int i) with Foo, Bar implements Baz {}
                          ^^^^

parser/inline_class/extends_with:8:32: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET8(int i) with Foo, Bar implements Baz {}
                               ^^^

parser/inline_class/extends_with:8:37: Expected ';' after this.
extension type ET8(int i) with Foo, Bar implements Baz {}
                                    ^^^

parser/inline_class/extends_with:8:41: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET8(int i) with Foo, Bar implements Baz {}
                                        ^^^^^^^^^^

parser/inline_class/extends_with:8:41: Expected ';' after this.
extension type ET8(int i) with Foo, Bar implements Baz {}
                                        ^^^^^^^^^^

parser/inline_class/extends_with:8:52: A function declaration needs an explicit list of parameters.
extension type ET8(int i) with Foo, Bar implements Baz {}
                                                   ^^^

parser/inline_class/extends_with:9:25: A extension type declaration must have a body, even if it is empty.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                        ^

parser/inline_class/extends_with:9:27: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:9:27: 'extends' can't be used as an identifier because it's a keyword.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:9:27: Expected ';' after this.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                          ^^^^^^^

parser/inline_class/extends_with:9:35: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                  ^^^

parser/inline_class/extends_with:9:35: Expected ';' after this.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                  ^^^

parser/inline_class/extends_with:9:39: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                      ^^^^

parser/inline_class/extends_with:9:39: 'with' can't be used as an identifier because it's a keyword.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                      ^^^^

parser/inline_class/extends_with:9:39: Expected ';' after this.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                      ^^^^

parser/inline_class/extends_with:9:48: Expected ';' after this.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                               ^^^^^^^^^^

parser/inline_class/extends_with:9:59: A function declaration needs an explicit list of parameters.
extension type ET9(int i) extends Foo with Bar implements Baz {}
                                                          ^^^

parser/inline_class/extends_with:10:26: A extension type declaration must have a body, even if it is empty.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                         ^

parser/inline_class/extends_with:10:28: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                           ^^^^^^^

parser/inline_class/extends_with:10:28: 'extends' can't be used as an identifier because it's a keyword.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                           ^^^^^^^

parser/inline_class/extends_with:10:28: Expected ';' after this.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                           ^^^^^^^

parser/inline_class/extends_with:10:36: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                   ^^^

parser/inline_class/extends_with:10:36: Expected ';' after this.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                   ^^^

parser/inline_class/extends_with:10:40: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                       ^^^^

parser/inline_class/extends_with:10:40: 'with' can't be used as an identifier because it's a keyword.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                       ^^^^

parser/inline_class/extends_with:10:40: Expected ';' after this.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                       ^^^^

parser/inline_class/extends_with:10:45: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                            ^^^

parser/inline_class/extends_with:10:50: Expected ';' after this.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                                 ^^^

parser/inline_class/extends_with:10:54: Variables must be declared using the keywords 'const', 'final', 'var' or a type name.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                                     ^^^^^^^^^^

parser/inline_class/extends_with:10:54: Expected ';' after this.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                                     ^^^^^^^^^^

parser/inline_class/extends_with:10:65: A function declaration needs an explicit list of parameters.
extension type ET10(int i) extends Foo with Bar, Baz implements Boz {}
                                                                ^^^

beginCompilationUnit(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET1)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Foo, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Foo, Foo)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Foo, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET2)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Foo, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Foo, Foo)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Foo, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET3)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(,)
      handleIdentifier(Bar, topLevelVariableDeclaration)
      handleNoFieldInitializer({)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Bar, Bar)
    endTopLevelFields(null, null, null, null, null, 2, Foo, ;)
  endTopLevelDeclaration({)
  beginMetadataStar({)
  endMetadataStar(0)
  beginTopLevelMember({)
    handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got '{'., null, {lexeme: {}], {, {)
    beginBlock({, BlockKind(invalid))
    endBlock(0, {, }, BlockKind(invalid))
    handleInvalidTopLevelBlock({)
    handleInvalidTopLevelDeclaration(})
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET4)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(with)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Foo, Foo)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(;)
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Bar, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Bar, Bar)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Bar, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET5)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(with)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Foo, Foo)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(;)
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Bar, Bar)
      handleNoType(;)
      handleIdentifier(Bar, topLevelVariableDeclaration)
      handleNoFieldInitializer(,)
      handleIdentifier(Baz, topLevelVariableDeclaration)
      handleNoFieldInitializer({)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Baz, Baz)
    endTopLevelFields(null, null, null, null, null, 2, Bar, ;)
  endTopLevelDeclaration({)
  beginMetadataStar({)
  endMetadataStar(0)
  beginTopLevelMember({)
    handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got '{'., null, {lexeme: {}], {, {)
    beginBlock({, BlockKind(invalid))
    endBlock(0, {, }, BlockKind(invalid))
    handleInvalidTopLevelBlock({)
    handleInvalidTopLevelDeclaration(})
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET6)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleIdentifier(Foo, typeReference)
      handleNoTypeArguments(implements)
      handleType(Foo, null)
      handleIdentifier(implements, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], implements, implements)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Bar, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Bar, Bar)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Bar, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET7)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleIdentifier(Foo, typeReference)
      handleNoTypeArguments(implements)
      handleType(Foo, null)
      handleIdentifier(implements, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], implements, implements)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Bar, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Bar, Bar)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Bar, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET8)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(,)
      handleIdentifier(Bar, topLevelVariableDeclaration)
      handleNoFieldInitializer(implements)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Bar, Bar)
    endTopLevelFields(null, null, null, null, null, 2, Foo, ;)
  endTopLevelDeclaration(implements)
  beginMetadataStar(implements)
  endMetadataStar(0)
  beginTopLevelMember(implements)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, implements, implements)
      handleNoType(;)
      handleIdentifier(implements, topLevelVariableDeclaration)
      handleNoFieldInitializer(Baz)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], implements, implements)
    endTopLevelFields(null, null, null, null, null, 1, implements, ;)
  endTopLevelDeclaration(Baz)
  beginMetadataStar(Baz)
  endMetadataStar(0)
  beginTopLevelMember(Baz)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Baz, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Baz, Baz)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Baz, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET9)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(with)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Foo, Foo)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(;)
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleIdentifier(Bar, typeReference)
      handleNoTypeArguments(implements)
      handleType(Bar, null)
      handleIdentifier(implements, topLevelVariableDeclaration)
      handleNoFieldInitializer(Baz)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], implements, implements)
    endTopLevelFields(null, null, null, null, null, 1, Bar, ;)
  endTopLevelDeclaration(Baz)
  beginMetadataStar(Baz)
  endMetadataStar(0)
  beginTopLevelMember(Baz)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Baz, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Baz, Baz)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Baz, null, })
  endTopLevelDeclaration(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(extension, ET10)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginMetadataStar(int)
          endMetadataStar(0)
          beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
            handleIdentifier(int, typeReference)
            handleNoTypeArguments(i)
            handleType(int, null)
            handleIdentifier(i, formalParameterDeclaration)
            handleFormalParameterWithoutValue())
          endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false)
      handleImplements(null, 0)
      handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, type, })
  endTopLevelDeclaration(extends)
  beginMetadataStar(extends)
  endMetadataStar(0)
  beginTopLevelMember(extends)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
      handleRecoverableError(MissingConstFinalVarOrType, extends, extends)
      handleNoType(})
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
      handleIdentifier(extends, topLevelVariableDeclaration)
      handleNoFieldInitializer(Foo)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], extends, extends)
    endTopLevelFields(null, null, null, null, null, 1, extends, ;)
  endTopLevelDeclaration(Foo)
  beginMetadataStar(Foo)
  endMetadataStar(0)
  beginTopLevelMember(Foo)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Foo, Foo)
      handleNoType(;)
      handleIdentifier(Foo, topLevelVariableDeclaration)
      handleNoFieldInitializer(with)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Foo, Foo)
    endTopLevelFields(null, null, null, null, null, 1, Foo, ;)
  endTopLevelDeclaration(with)
  beginMetadataStar(with)
  endMetadataStar(0)
  beginTopLevelMember(with)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, with, with)
      handleNoType(;)
      handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
      handleIdentifier(with, topLevelVariableDeclaration)
      handleNoFieldInitializer(Bar)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], with, with)
    endTopLevelFields(null, null, null, null, null, 1, with, ;)
  endTopLevelDeclaration(Bar)
  beginMetadataStar(Bar)
  endMetadataStar(0)
  beginTopLevelMember(Bar)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, Bar, Bar)
      handleNoType(;)
      handleIdentifier(Bar, topLevelVariableDeclaration)
      handleNoFieldInitializer(,)
      handleIdentifier(Baz, topLevelVariableDeclaration)
      handleNoFieldInitializer(implements)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], Baz, Baz)
    endTopLevelFields(null, null, null, null, null, 2, Bar, ;)
  endTopLevelDeclaration(implements)
  beginMetadataStar(implements)
  endMetadataStar(0)
  beginTopLevelMember(implements)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
      handleRecoverableError(MissingConstFinalVarOrType, implements, implements)
      handleNoType(;)
      handleIdentifier(implements, topLevelVariableDeclaration)
      handleNoFieldInitializer(Boz)
      handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], implements, implements)
    endTopLevelFields(null, null, null, null, null, 1, implements, ;)
  endTopLevelDeclaration(Boz)
  beginMetadataStar(Boz)
  endMetadataStar(0)
  beginTopLevelMember(Boz)
    beginTopLevelMethod(;, null, null)
      handleNoType(;)
      handleIdentifier(Boz, topLevelFunctionDeclaration)
      handleNoTypeVariables({)
      handleRecoverableError(MissingFunctionParameters, Boz, Boz)
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(Boz, null, })
  endTopLevelDeclaration()
endCompilationUnit(47, )
