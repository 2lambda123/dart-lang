parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(;)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassHeaderRecovery(C, class, class)
            parseDeclarationHeaderRecoveryInternal(C, class, class, DeclarationHeaderKind.Class)
              parseClassHeaderOpt(C, class, class)
                parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
                parseClassWithClauseOpt(C)
                parseClassOrMixinOrEnumImplementsOpt(C)
              skipUnexpectedTokenOpt(C, [extends, with, implements, {])
              parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
                listener: handleNoType(C)
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt(C)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(C)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.Class)
          ensureBlock(C, null, class declaration)
            reportRecoverableError(C, Message[ExpectedClassOrMixinBody, A class declaration must have a body, even if it is empty., Try adding an empty body., {string: class declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A class declaration must have a body, even if it is empty., Try adding an empty body., {string: class declaration}], C, C)
            insertBlock(C)
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, mixin, null, null, null, null, Instance of 'DirectiveContext')
      parseMixin(null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: handleNoTypeVariables(;)
        listener: beginMixinDeclaration(null, null, mixin, M)
        parseMixinHeaderOpt(M, mixin)
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseMixinHeaderRecovery(M, mixin, M)
          parseMixinHeaderOpt(M, mixin)
            parseMixinOnOpt(M)
            parseClassOrMixinOrEnumImplementsOpt(M)
          skipUnexpectedTokenOpt(M, [on, implements, {])
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleRecoverMixinHeader()
        ensureBlock(M, null, mixin declaration)
          reportRecoverableError(M, Message[ExpectedClassOrMixinBody, A mixin declaration must have a body, even if it is empty., Try adding an empty body., {string: mixin declaration}])
            listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A mixin declaration must have a body, even if it is empty., Try adding an empty body., {string: mixin declaration}], M, M)
          insertBlock(M)
            rewriter()
            rewriter()
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, extension, null, null, null, null, Instance of 'DirectiveContext')
      parseExtension(extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionDeclaration(extension, E)
          listener: handleIdentifier(int, typeReference)
          listener: handleNoTypeArguments(;)
          listener: handleType(int, null)
          ensureBlock(int, null, extension declaration)
            reportRecoverableError(int, Message[ExpectedClassOrMixinBody, A extension declaration must have a body, even if it is empty., Try adding an empty body., {string: extension declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension declaration must have a body, even if it is empty., Try adding an empty body., {string: extension declaration}], int, int)
            insertBlock(int)
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(int, DeclarationKind.Extension, E)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 0, {, })
          listener: endExtensionDeclaration(extension, on, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, extension, null, null, null, null, Instance of 'DirectiveContext')
      parseExtension(extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(type, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(extension, ET1)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(ET1, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(i)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(i, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseExtensionTypeHeaderRecovery(), extension)
            parseDeclarationHeaderRecoveryInternal(), extension, extension, DeclarationHeaderKind.ExtensionType)
              parseClassOrMixinOrEnumImplementsOpt())
              skipUnexpectedTokenOpt(), [extends, with, implements, {])
              parseClassExtendsOpt(), DeclarationHeaderKind.ExtensionType)
                listener: handleNoType())
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt())
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt())
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.ExtensionType)
          ensureBlock(), null, extension type declaration)
            reportRecoverableError(), Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], ), ))
            insertBlock())
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET1)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, type, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, extension, null, null, null, null, Instance of 'DirectiveContext')
      parseExtension(extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(type, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(extension, ET2)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(ET2, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(i)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(i, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments(;)
            listener: handleType(Foo, null)
            listener: handleImplements(implements, 1)
          parseExtensionTypeHeaderRecovery(), extension)
            parseDeclarationHeaderRecoveryInternal(), extension, extension, DeclarationHeaderKind.ExtensionType)
              parseClassOrMixinOrEnumImplementsOpt())
              skipUnexpectedTokenOpt(Foo, [extends, with, implements, {])
              parseClassExtendsOpt(Foo, DeclarationHeaderKind.ExtensionType)
                listener: handleNoType(Foo)
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt(Foo)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(Foo)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.ExtensionType)
          ensureBlock(Foo, null, extension type declaration)
            reportRecoverableError(Foo, Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], Foo, Foo)
            insertBlock(Foo)
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(Foo, DeclarationKind.ExtensionType, ET2)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, type, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, extension, null, null, null, null, Instance of 'DirectiveContext')
      parseExtension(extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(type, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(extension, ET3)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(ET3, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(i)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(i, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(Foo, null)
            listener: handleIdentifier(Bar, typeReference)
            listener: handleNoTypeArguments(;)
            listener: handleType(Bar, null)
            listener: handleImplements(implements, 2)
          parseExtensionTypeHeaderRecovery(), extension)
            parseDeclarationHeaderRecoveryInternal(), extension, extension, DeclarationHeaderKind.ExtensionType)
              parseClassOrMixinOrEnumImplementsOpt())
              skipUnexpectedTokenOpt(Bar, [extends, with, implements, {])
              parseClassExtendsOpt(Bar, DeclarationHeaderKind.ExtensionType)
                listener: handleNoType(Bar)
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt(Bar)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(Bar)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.ExtensionType)
          ensureBlock(Bar, null, extension type declaration)
            reportRecoverableError(Bar, Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A extension type declaration must have a body, even if it is empty., Try adding an empty body., {string: extension type declaration}], Bar, Bar)
            insertBlock(Bar)
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(Bar, DeclarationKind.ExtensionType, ET3)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, type, })
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(;)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(;)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {lexeme: ;}], ;, ;)
      listener: handleInvalidTopLevelDeclaration(;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(12, )
